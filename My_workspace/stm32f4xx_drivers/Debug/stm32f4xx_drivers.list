
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002154  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080022dc  080022dc  000032dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002364  08002364  00004070  2**0
                  CONTENTS
  4 .ARM          00000000  08002364  08002364  00004070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002364  08002364  00004070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002364  08002364  00003364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002368  08002368  00003368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  0800236c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004070  2**0
                  CONTENTS
 10 .bss          000001ac  20000070  20000070  00004070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000021c  2000021c  00004070  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00004070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002c50  00000000  00000000  0000409a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000c3d  00000000  00000000  00006cea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003c0  00000000  00000000  00007928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002b8  00000000  00000000  00007ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003f6b  00000000  00000000  00007fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004525  00000000  00000000  0000bf0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000d2f0  00000000  00000000  00010430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0001d720  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000146c  00000000  00000000  0001d764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  0001ebd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080022c4 	.word	0x080022c4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	080022c4 	.word	0x080022c4

080001c8 <ds1307_i2c_pin_config>:

static uint8_t binary_to_bcd(uint8_t value);
static uint8_t bcd_to_binary(uint8_t value);


static void ds1307_i2c_pin_config(void){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
	 * I2C1_SDA ==> PB7
	 */

	GPIO_Handle_t I2C_GPIO;

	memset(&I2C_GPIO, 0, sizeof(I2C_GPIO));
 80001ce:	1d3b      	adds	r3, r7, #4
 80001d0:	220c      	movs	r2, #12
 80001d2:	2100      	movs	r1, #0
 80001d4:	4618      	mov	r0, r3
 80001d6:	f001 fdc5 	bl	8001d64 <memset>

	I2C_GPIO.pGPIOx								= DS1307_I2C_GPIO_PORT;
 80001da:	4b0e      	ldr	r3, [pc, #56]	@ (8000214 <ds1307_i2c_pin_config+0x4c>)
 80001dc:	607b      	str	r3, [r7, #4]
	I2C_GPIO.GPIO_PinConfig.GPIO_PinMode		= GPIO_MODE_ALTFN;
 80001de:	2302      	movs	r3, #2
 80001e0:	727b      	strb	r3, [r7, #9]
	I2C_GPIO.GPIO_PinConfig.GPIO_PinAltFunMode	= 4;
 80001e2:	2304      	movs	r3, #4
 80001e4:	737b      	strb	r3, [r7, #13]
	I2C_GPIO.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OP_TYPE_OD;
 80001e6:	2301      	movs	r3, #1
 80001e8:	733b      	strb	r3, [r7, #12]
	I2C_GPIO.GPIO_PinConfig.GPIO_PinPuPdControl	= DS1307_I2C_PUPD;
 80001ea:	2301      	movs	r3, #1
 80001ec:	72fb      	strb	r3, [r7, #11]
	I2C_GPIO.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_SPEED_MEDIUM;
 80001ee:	2301      	movs	r3, #1
 80001f0:	72bb      	strb	r3, [r7, #10]

	//SDA
	I2C_GPIO.GPIO_PinConfig.GPIO_PinNumber		= DS1307_IC2_SDA_PIN;
 80001f2:	2307      	movs	r3, #7
 80001f4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2C_GPIO);
 80001f6:	1d3b      	adds	r3, r7, #4
 80001f8:	4618      	mov	r0, r3
 80001fa:	f000 fed1 	bl	8000fa0 <GPIO_Init>

	//SCL
	I2C_GPIO.GPIO_PinConfig.GPIO_PinNumber		= DS1307_IC2_SCL_PIN;
 80001fe:	2306      	movs	r3, #6
 8000200:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2C_GPIO);
 8000202:	1d3b      	adds	r3, r7, #4
 8000204:	4618      	mov	r0, r3
 8000206:	f000 fecb 	bl	8000fa0 <GPIO_Init>
}
 800020a:	bf00      	nop
 800020c:	3710      	adds	r7, #16
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop
 8000214:	40020400 	.word	0x40020400

08000218 <ds1307_i2c_config>:

static void ds1307_i2c_config(void){
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0

	g_ds1307I2CHandle.pI2Cx						= DS1307_I2C;
 800021c:	4b06      	ldr	r3, [pc, #24]	@ (8000238 <ds1307_i2c_config+0x20>)
 800021e:	4a07      	ldr	r2, [pc, #28]	@ (800023c <ds1307_i2c_config+0x24>)
 8000220:	601a      	str	r2, [r3, #0]
	//g_ds1307I2CHandle.I2C_Config.I2C_DeviceAddress	= DS1307_I2C_ADDRESS;
	g_ds1307I2CHandle.I2C_Config.I2C_ACKControl	= I2C_ACK_ENABLE;
 8000222:	4b05      	ldr	r3, [pc, #20]	@ (8000238 <ds1307_i2c_config+0x20>)
 8000224:	2201      	movs	r2, #1
 8000226:	725a      	strb	r2, [r3, #9]
	g_ds1307I2CHandle.I2C_Config.I2C_SCLSpeed	= DS1307_I2C_SPEED;
 8000228:	4b03      	ldr	r3, [pc, #12]	@ (8000238 <ds1307_i2c_config+0x20>)
 800022a:	4a05      	ldr	r2, [pc, #20]	@ (8000240 <ds1307_i2c_config+0x28>)
 800022c:	605a      	str	r2, [r3, #4]

	I2C_Init(&g_ds1307I2CHandle);
 800022e:	4802      	ldr	r0, [pc, #8]	@ (8000238 <ds1307_i2c_config+0x20>)
 8000230:	f001 f94e 	bl	80014d0 <I2C_Init>
}
 8000234:	bf00      	nop
 8000236:	bd80      	pop	{r7, pc}
 8000238:	2000008c 	.word	0x2000008c
 800023c:	40005400 	.word	0x40005400
 8000240:	000186a0 	.word	0x000186a0

08000244 <ds1307_init>:


//return 1: CH = 1; init failed
//return 0: CH = 0; init success
uint8_t ds1307_init(void){
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0

	//1. Intialize I2C PIN
	ds1307_i2c_pin_config();
 800024a:	f7ff ffbd 	bl	80001c8 <ds1307_i2c_pin_config>

	//2. Intialize I2C peripheral
	ds1307_i2c_config();
 800024e:	f7ff ffe3 	bl	8000218 <ds1307_i2c_config>

	//3. Enable i2c peripheral
	I2C_PeripheralControl(DS1307_I2C, ENABLE);
 8000252:	2101      	movs	r1, #1
 8000254:	4809      	ldr	r0, [pc, #36]	@ (800027c <ds1307_init+0x38>)
 8000256:	f001 f9ef 	bl	8001638 <I2C_PeripheralControl>

	//4. Make clock halt = 0
	ds1307_write(0x00, DS1307_ADDR_SEC);
 800025a:	2100      	movs	r1, #0
 800025c:	2000      	movs	r0, #0
 800025e:	f000 f903 	bl	8000468 <ds1307_write>

	//5. Read back control halt bit
	uint8_t clock_state = ds1307_read(DS1307_ADDR_SEC);
 8000262:	2000      	movs	r0, #0
 8000264:	f000 f91c 	bl	80004a0 <ds1307_read>
 8000268:	4603      	mov	r3, r0
 800026a:	71fb      	strb	r3, [r7, #7]

	return ((clock_state >> 7) & 0x1);
 800026c:	79fb      	ldrb	r3, [r7, #7]
 800026e:	09db      	lsrs	r3, r3, #7
 8000270:	b2db      	uxtb	r3, r3
}
 8000272:	4618      	mov	r0, r3
 8000274:	3708      	adds	r7, #8
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	40005400 	.word	0x40005400

08000280 <ds1307_set_current_time>:

void ds1307_set_current_time(RTC_time_t *rtc_time){
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]

	uint8_t seconds, hrs;
	seconds = binary_to_bcd(rtc_time->seconds);
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	4618      	mov	r0, r3
 800028e:	f000 f925 	bl	80004dc <binary_to_bcd>
 8000292:	4603      	mov	r3, r0
 8000294:	73bb      	strb	r3, [r7, #14]
	seconds &= ~(1 << 7);
 8000296:	7bbb      	ldrb	r3, [r7, #14]
 8000298:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800029c:	73bb      	strb	r3, [r7, #14]
	ds1307_write(seconds, DS1307_ADDR_SEC);
 800029e:	7bbb      	ldrb	r3, [r7, #14]
 80002a0:	2100      	movs	r1, #0
 80002a2:	4618      	mov	r0, r3
 80002a4:	f000 f8e0 	bl	8000468 <ds1307_write>

	ds1307_write(binary_to_bcd(rtc_time->minutes), DS1307_ADDR_MIN);
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	785b      	ldrb	r3, [r3, #1]
 80002ac:	4618      	mov	r0, r3
 80002ae:	f000 f915 	bl	80004dc <binary_to_bcd>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2101      	movs	r1, #1
 80002b6:	4618      	mov	r0, r3
 80002b8:	f000 f8d6 	bl	8000468 <ds1307_write>


	hrs = binary_to_bcd(rtc_time->hours);
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	789b      	ldrb	r3, [r3, #2]
 80002c0:	4618      	mov	r0, r3
 80002c2:	f000 f90b 	bl	80004dc <binary_to_bcd>
 80002c6:	4603      	mov	r3, r0
 80002c8:	73fb      	strb	r3, [r7, #15]
	if(rtc_time->time_format == TIME_FORMAT_24HRS){
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	78db      	ldrb	r3, [r3, #3]
 80002ce:	2b02      	cmp	r3, #2
 80002d0:	d104      	bne.n	80002dc <ds1307_set_current_time+0x5c>
		hrs &= ~(1 << 6);
 80002d2:	7bfb      	ldrb	r3, [r7, #15]
 80002d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80002d8:	73fb      	strb	r3, [r7, #15]
 80002da:	e011      	b.n	8000300 <ds1307_set_current_time+0x80>
	}else{
		hrs |= (1 << 6);
 80002dc:	7bfb      	ldrb	r3, [r7, #15]
 80002de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80002e2:	73fb      	strb	r3, [r7, #15]
		hrs = (rtc_time->time_format == TIME_FORMAT_12HRS_PM) ? hrs | (1 << 5) : hrs & ~(1 << 5);
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	78db      	ldrb	r3, [r3, #3]
 80002e8:	2b01      	cmp	r3, #1
 80002ea:	d104      	bne.n	80002f6 <ds1307_set_current_time+0x76>
 80002ec:	7bfb      	ldrb	r3, [r7, #15]
 80002ee:	f043 0320 	orr.w	r3, r3, #32
 80002f2:	b2db      	uxtb	r3, r3
 80002f4:	e003      	b.n	80002fe <ds1307_set_current_time+0x7e>
 80002f6:	7bfb      	ldrb	r3, [r7, #15]
 80002f8:	f023 0320 	bic.w	r3, r3, #32
 80002fc:	b2db      	uxtb	r3, r3
 80002fe:	73fb      	strb	r3, [r7, #15]
	}

	ds1307_write(hrs, DS1307_ADDR_HRS);
 8000300:	7bfb      	ldrb	r3, [r7, #15]
 8000302:	2102      	movs	r1, #2
 8000304:	4618      	mov	r0, r3
 8000306:	f000 f8af 	bl	8000468 <ds1307_write>
}
 800030a:	bf00      	nop
 800030c:	3710      	adds	r7, #16
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}

08000312 <ds1307_set_current_date>:



void ds1307_set_current_date(RTC_date_t *rtc_date){
 8000312:	b580      	push	{r7, lr}
 8000314:	b082      	sub	sp, #8
 8000316:	af00      	add	r7, sp, #0
 8000318:	6078      	str	r0, [r7, #4]

	ds1307_write(binary_to_bcd(rtc_date->date), DS1307_ADDR_DATE);
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	4618      	mov	r0, r3
 8000320:	f000 f8dc 	bl	80004dc <binary_to_bcd>
 8000324:	4603      	mov	r3, r0
 8000326:	2104      	movs	r1, #4
 8000328:	4618      	mov	r0, r3
 800032a:	f000 f89d 	bl	8000468 <ds1307_write>

	ds1307_write(binary_to_bcd(rtc_date->month), DS1307_ADDR_MONTH);
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	785b      	ldrb	r3, [r3, #1]
 8000332:	4618      	mov	r0, r3
 8000334:	f000 f8d2 	bl	80004dc <binary_to_bcd>
 8000338:	4603      	mov	r3, r0
 800033a:	2105      	movs	r1, #5
 800033c:	4618      	mov	r0, r3
 800033e:	f000 f893 	bl	8000468 <ds1307_write>

	ds1307_write(binary_to_bcd(rtc_date->year), DS1307_ADDR_YEAR);
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	789b      	ldrb	r3, [r3, #2]
 8000346:	4618      	mov	r0, r3
 8000348:	f000 f8c8 	bl	80004dc <binary_to_bcd>
 800034c:	4603      	mov	r3, r0
 800034e:	2106      	movs	r1, #6
 8000350:	4618      	mov	r0, r3
 8000352:	f000 f889 	bl	8000468 <ds1307_write>

	ds1307_write(binary_to_bcd(rtc_date->day), DS1307_ADDR_DAY);
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	78db      	ldrb	r3, [r3, #3]
 800035a:	4618      	mov	r0, r3
 800035c:	f000 f8be 	bl	80004dc <binary_to_bcd>
 8000360:	4603      	mov	r3, r0
 8000362:	2103      	movs	r1, #3
 8000364:	4618      	mov	r0, r3
 8000366:	f000 f87f 	bl	8000468 <ds1307_write>

}
 800036a:	bf00      	nop
 800036c:	3708      	adds	r7, #8
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}

08000372 <ds1307_get_current_time>:


void ds1307_get_current_time(RTC_time_t *rtc_time){
 8000372:	b580      	push	{r7, lr}
 8000374:	b084      	sub	sp, #16
 8000376:	af00      	add	r7, sp, #0
 8000378:	6078      	str	r0, [r7, #4]

	uint8_t seconds, hrs;
	seconds = ds1307_read(DS1307_ADDR_SEC);
 800037a:	2000      	movs	r0, #0
 800037c:	f000 f890 	bl	80004a0 <ds1307_read>
 8000380:	4603      	mov	r3, r0
 8000382:	73bb      	strb	r3, [r7, #14]
	seconds &= ~(1 << 7);
 8000384:	7bbb      	ldrb	r3, [r7, #14]
 8000386:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800038a:	73bb      	strb	r3, [r7, #14]

	rtc_time->seconds = bcd_to_binary(seconds);
 800038c:	7bbb      	ldrb	r3, [r7, #14]
 800038e:	4618      	mov	r0, r3
 8000390:	f000 f8d0 	bl	8000534 <bcd_to_binary>
 8000394:	4603      	mov	r3, r0
 8000396:	461a      	mov	r2, r3
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	701a      	strb	r2, [r3, #0]

	rtc_time->minutes = bcd_to_binary(ds1307_read(DS1307_ADDR_MIN));
 800039c:	2001      	movs	r0, #1
 800039e:	f000 f87f 	bl	80004a0 <ds1307_read>
 80003a2:	4603      	mov	r3, r0
 80003a4:	4618      	mov	r0, r3
 80003a6:	f000 f8c5 	bl	8000534 <bcd_to_binary>
 80003aa:	4603      	mov	r3, r0
 80003ac:	461a      	mov	r2, r3
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	705a      	strb	r2, [r3, #1]

	hrs = ds1307_read(DS1307_ADDR_HRS);
 80003b2:	2002      	movs	r0, #2
 80003b4:	f000 f874 	bl	80004a0 <ds1307_read>
 80003b8:	4603      	mov	r3, r0
 80003ba:	73fb      	strb	r3, [r7, #15]
	if(hrs & (1 << 6)){
 80003bc:	7bfb      	ldrb	r3, [r7, #15]
 80003be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d00c      	beq.n	80003e0 <ds1307_get_current_time+0x6e>
		//12 hrs format
		rtc_time->time_format = (hrs & (1 << 5)) ? TIME_FORMAT_12HRS_PM : TIME_FORMAT_12HRS_AM;
 80003c6:	7bfb      	ldrb	r3, [r7, #15]
 80003c8:	115b      	asrs	r3, r3, #5
 80003ca:	b2db      	uxtb	r3, r3
 80003cc:	f003 0301 	and.w	r3, r3, #1
 80003d0:	b2da      	uxtb	r2, r3
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	70da      	strb	r2, [r3, #3]
		hrs &= ~(3 << 5); // clear bit 5 &6
 80003d6:	7bfb      	ldrb	r3, [r7, #15]
 80003d8:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 80003dc:	73fb      	strb	r3, [r7, #15]
 80003de:	e002      	b.n	80003e6 <ds1307_get_current_time+0x74>
	}else{
		//24 hrs format
		rtc_time->time_format = TIME_FORMAT_24HRS;
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	2202      	movs	r2, #2
 80003e4:	70da      	strb	r2, [r3, #3]
	}
	rtc_time->hours	= bcd_to_binary(hrs);
 80003e6:	7bfb      	ldrb	r3, [r7, #15]
 80003e8:	4618      	mov	r0, r3
 80003ea:	f000 f8a3 	bl	8000534 <bcd_to_binary>
 80003ee:	4603      	mov	r3, r0
 80003f0:	461a      	mov	r2, r3
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	709a      	strb	r2, [r3, #2]

}
 80003f6:	bf00      	nop
 80003f8:	3710      	adds	r7, #16
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}

080003fe <ds1307_get_current_date>:


void ds1307_get_current_date(RTC_date_t *rtc_date){
 80003fe:	b580      	push	{r7, lr}
 8000400:	b082      	sub	sp, #8
 8000402:	af00      	add	r7, sp, #0
 8000404:	6078      	str	r0, [r7, #4]

	rtc_date->date 	= bcd_to_binary(ds1307_read(DS1307_ADDR_DATE));
 8000406:	2004      	movs	r0, #4
 8000408:	f000 f84a 	bl	80004a0 <ds1307_read>
 800040c:	4603      	mov	r3, r0
 800040e:	4618      	mov	r0, r3
 8000410:	f000 f890 	bl	8000534 <bcd_to_binary>
 8000414:	4603      	mov	r3, r0
 8000416:	461a      	mov	r2, r3
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	701a      	strb	r2, [r3, #0]

	rtc_date->month = bcd_to_binary(ds1307_read(DS1307_ADDR_MONTH));
 800041c:	2005      	movs	r0, #5
 800041e:	f000 f83f 	bl	80004a0 <ds1307_read>
 8000422:	4603      	mov	r3, r0
 8000424:	4618      	mov	r0, r3
 8000426:	f000 f885 	bl	8000534 <bcd_to_binary>
 800042a:	4603      	mov	r3, r0
 800042c:	461a      	mov	r2, r3
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	705a      	strb	r2, [r3, #1]

	rtc_date->year 	= bcd_to_binary(ds1307_read(DS1307_ADDR_YEAR));
 8000432:	2006      	movs	r0, #6
 8000434:	f000 f834 	bl	80004a0 <ds1307_read>
 8000438:	4603      	mov	r3, r0
 800043a:	4618      	mov	r0, r3
 800043c:	f000 f87a 	bl	8000534 <bcd_to_binary>
 8000440:	4603      	mov	r3, r0
 8000442:	461a      	mov	r2, r3
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	709a      	strb	r2, [r3, #2]

	rtc_date->day 	= bcd_to_binary(ds1307_read(DS1307_ADDR_DAY));
 8000448:	2003      	movs	r0, #3
 800044a:	f000 f829 	bl	80004a0 <ds1307_read>
 800044e:	4603      	mov	r3, r0
 8000450:	4618      	mov	r0, r3
 8000452:	f000 f86f 	bl	8000534 <bcd_to_binary>
 8000456:	4603      	mov	r3, r0
 8000458:	461a      	mov	r2, r3
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	70da      	strb	r2, [r3, #3]
}
 800045e:	bf00      	nop
 8000460:	3708      	adds	r7, #8
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
	...

08000468 <ds1307_write>:


static void ds1307_write(uint8_t value, uint8_t reg_addr){
 8000468:	b580      	push	{r7, lr}
 800046a:	b086      	sub	sp, #24
 800046c:	af02      	add	r7, sp, #8
 800046e:	4603      	mov	r3, r0
 8000470:	460a      	mov	r2, r1
 8000472:	71fb      	strb	r3, [r7, #7]
 8000474:	4613      	mov	r3, r2
 8000476:	71bb      	strb	r3, [r7, #6]
	uint8_t tx[2] = {reg_addr, value};
 8000478:	79bb      	ldrb	r3, [r7, #6]
 800047a:	733b      	strb	r3, [r7, #12]
 800047c:	79fb      	ldrb	r3, [r7, #7]
 800047e:	737b      	strb	r3, [r7, #13]

	I2C_MasterSendData(&g_ds1307I2CHandle, tx, 2, DS1307_I2C_ADDRESS, I2C_DISABLE_SR);
 8000480:	f107 010c 	add.w	r1, r7, #12
 8000484:	2300      	movs	r3, #0
 8000486:	9300      	str	r3, [sp, #0]
 8000488:	2368      	movs	r3, #104	@ 0x68
 800048a:	2202      	movs	r2, #2
 800048c:	4803      	ldr	r0, [pc, #12]	@ (800049c <ds1307_write+0x34>)
 800048e:	f001 f91c 	bl	80016ca <I2C_MasterSendData>
}
 8000492:	bf00      	nop
 8000494:	3710      	adds	r7, #16
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	2000008c 	.word	0x2000008c

080004a0 <ds1307_read>:


static uint8_t ds1307_read(uint8_t reg_addr){
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b086      	sub	sp, #24
 80004a4:	af02      	add	r7, sp, #8
 80004a6:	4603      	mov	r3, r0
 80004a8:	71fb      	strb	r3, [r7, #7]

	uint8_t clock_state;

	I2C_MasterSendData(&g_ds1307I2CHandle, &reg_addr, 1, DS1307_I2C_ADDRESS, I2C_DISABLE_SR);
 80004aa:	1df9      	adds	r1, r7, #7
 80004ac:	2300      	movs	r3, #0
 80004ae:	9300      	str	r3, [sp, #0]
 80004b0:	2368      	movs	r3, #104	@ 0x68
 80004b2:	2201      	movs	r2, #1
 80004b4:	4808      	ldr	r0, [pc, #32]	@ (80004d8 <ds1307_read+0x38>)
 80004b6:	f001 f908 	bl	80016ca <I2C_MasterSendData>

	I2C_MasterReceiveData(&g_ds1307I2CHandle, &clock_state, 1, DS1307_I2C_ADDRESS, I2C_DISABLE_SR);
 80004ba:	f107 010f 	add.w	r1, r7, #15
 80004be:	2300      	movs	r3, #0
 80004c0:	9300      	str	r3, [sp, #0]
 80004c2:	2368      	movs	r3, #104	@ 0x68
 80004c4:	2201      	movs	r2, #1
 80004c6:	4804      	ldr	r0, [pc, #16]	@ (80004d8 <ds1307_read+0x38>)
 80004c8:	f001 f966 	bl	8001798 <I2C_MasterReceiveData>

	return clock_state;
 80004cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80004ce:	4618      	mov	r0, r3
 80004d0:	3710      	adds	r7, #16
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	2000008c 	.word	0x2000008c

080004dc <binary_to_bcd>:

static uint8_t binary_to_bcd(uint8_t value){
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	71fb      	strb	r3, [r7, #7]

	uint8_t m, n;
	uint8_t bcd;

	bcd = value;
 80004e6:	79fb      	ldrb	r3, [r7, #7]
 80004e8:	73fb      	strb	r3, [r7, #15]

	if(value >= 10){
 80004ea:	79fb      	ldrb	r3, [r7, #7]
 80004ec:	2b09      	cmp	r3, #9
 80004ee:	d918      	bls.n	8000522 <binary_to_bcd+0x46>
		m = value / 10;
 80004f0:	79fb      	ldrb	r3, [r7, #7]
 80004f2:	4a0f      	ldr	r2, [pc, #60]	@ (8000530 <binary_to_bcd+0x54>)
 80004f4:	fba2 2303 	umull	r2, r3, r2, r3
 80004f8:	08db      	lsrs	r3, r3, #3
 80004fa:	73bb      	strb	r3, [r7, #14]
		n = value % 10;
 80004fc:	79fa      	ldrb	r2, [r7, #7]
 80004fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000530 <binary_to_bcd+0x54>)
 8000500:	fba3 1302 	umull	r1, r3, r3, r2
 8000504:	08d9      	lsrs	r1, r3, #3
 8000506:	460b      	mov	r3, r1
 8000508:	009b      	lsls	r3, r3, #2
 800050a:	440b      	add	r3, r1
 800050c:	005b      	lsls	r3, r3, #1
 800050e:	1ad3      	subs	r3, r2, r3
 8000510:	737b      	strb	r3, [r7, #13]
		bcd = (uint8_t)((m << 4) | n);
 8000512:	7bbb      	ldrb	r3, [r7, #14]
 8000514:	011b      	lsls	r3, r3, #4
 8000516:	b25a      	sxtb	r2, r3
 8000518:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800051c:	4313      	orrs	r3, r2
 800051e:	b25b      	sxtb	r3, r3
 8000520:	73fb      	strb	r3, [r7, #15]
	}
	return bcd;
 8000522:	7bfb      	ldrb	r3, [r7, #15]
}
 8000524:	4618      	mov	r0, r3
 8000526:	3714      	adds	r7, #20
 8000528:	46bd      	mov	sp, r7
 800052a:	bc80      	pop	{r7}
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	cccccccd 	.word	0xcccccccd

08000534 <bcd_to_binary>:

static uint8_t bcd_to_binary(uint8_t value){
 8000534:	b480      	push	{r7}
 8000536:	b085      	sub	sp, #20
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	71fb      	strb	r3, [r7, #7]
	uint8_t m, n;

	m = (uint8_t)((value >> 4) * 10);
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	091b      	lsrs	r3, r3, #4
 8000542:	b2db      	uxtb	r3, r3
 8000544:	461a      	mov	r2, r3
 8000546:	0092      	lsls	r2, r2, #2
 8000548:	4413      	add	r3, r2
 800054a:	005b      	lsls	r3, r3, #1
 800054c:	73fb      	strb	r3, [r7, #15]
	n = value & (uint8_t)0x0f;
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	f003 030f 	and.w	r3, r3, #15
 8000554:	73bb      	strb	r3, [r7, #14]

	return (m + n);
 8000556:	7bfa      	ldrb	r2, [r7, #15]
 8000558:	7bbb      	ldrb	r3, [r7, #14]
 800055a:	4413      	add	r3, r2
 800055c:	b2db      	uxtb	r3, r3
}
 800055e:	4618      	mov	r0, r3
 8000560:	3714      	adds	r7, #20
 8000562:	46bd      	mov	sp, r7
 8000564:	bc80      	pop	{r7}
 8000566:	4770      	bx	lr

08000568 <lcd_send_command>:
static void lcd_enable(void);
static void mdelay(uint32_t cnt);
static void udelay(uint32_t cnt);

void lcd_send_command(uint8_t cmd)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	4603      	mov	r3, r0
 8000570:	71fb      	strb	r3, [r7, #7]
	/* RS=0 for LCD command */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 8000572:	2200      	movs	r2, #0
 8000574:	2100      	movs	r1, #0
 8000576:	480c      	ldr	r0, [pc, #48]	@ (80005a8 <lcd_send_command+0x40>)
 8000578:	f000 feae 	bl	80012d8 <GPIO_WriteToOutputPin>

	/*R/nW = 0, for write */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 800057c:	2200      	movs	r2, #0
 800057e:	2101      	movs	r1, #1
 8000580:	4809      	ldr	r0, [pc, #36]	@ (80005a8 <lcd_send_command+0x40>)
 8000582:	f000 fea9 	bl	80012d8 <GPIO_WriteToOutputPin>

	write_4_bits(cmd >> 4);
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	091b      	lsrs	r3, r3, #4
 800058a:	b2db      	uxtb	r3, r3
 800058c:	4618      	mov	r0, r3
 800058e:	f000 f8cd 	bl	800072c <write_4_bits>
	write_4_bits(cmd & 0x0F);
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	f003 030f 	and.w	r3, r3, #15
 8000598:	b2db      	uxtb	r3, r3
 800059a:	4618      	mov	r0, r3
 800059c:	f000 f8c6 	bl	800072c <write_4_bits>

}
 80005a0:	bf00      	nop
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	40020c00 	.word	0x40020c00

080005ac <lcd_print_char>:
 *Here we used 4 bit parallel data transmission.
 *First higher nibble of the data will be sent on to the data lines D4,D5,D6,D7
 *Then lower nibble of the data will be set on to the data lines D4,D5,D6,D7
 */
void lcd_print_char(uint8_t data)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]
	/* RS=1 for LCD user data */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_SET);
 80005b6:	2201      	movs	r2, #1
 80005b8:	2100      	movs	r1, #0
 80005ba:	480c      	ldr	r0, [pc, #48]	@ (80005ec <lcd_print_char+0x40>)
 80005bc:	f000 fe8c 	bl	80012d8 <GPIO_WriteToOutputPin>

	/*R/nW = 0, for write */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 80005c0:	2200      	movs	r2, #0
 80005c2:	2101      	movs	r1, #1
 80005c4:	4809      	ldr	r0, [pc, #36]	@ (80005ec <lcd_print_char+0x40>)
 80005c6:	f000 fe87 	bl	80012d8 <GPIO_WriteToOutputPin>

	write_4_bits(data >> 4);  /*Higher nibble*/
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	091b      	lsrs	r3, r3, #4
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	4618      	mov	r0, r3
 80005d2:	f000 f8ab 	bl	800072c <write_4_bits>
	write_4_bits(data & 0x0F); /*Lower nibble*/
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	f003 030f 	and.w	r3, r3, #15
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 f8a4 	bl	800072c <write_4_bits>

}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40020c00 	.word	0x40020c00

080005f0 <lcd_print_string>:


void lcd_print_string(char *message)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]

      do
      {
          lcd_print_char((uint8_t)*message++);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	1c5a      	adds	r2, r3, #1
 80005fc:	607a      	str	r2, [r7, #4]
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	4618      	mov	r0, r3
 8000602:	f7ff ffd3 	bl	80005ac <lcd_print_char>
      }
      while (*message != '\0');
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d1f4      	bne.n	80005f8 <lcd_print_string+0x8>

}
 800060e:	bf00      	nop
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <lcd_init>:


void lcd_init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0

	//1. Configure the gpio pins which are used for lcd connections

	GPIO_Handle_t lcd_signal;

	lcd_signal.pGPIOx = LCD_GPIO_PORT;
 800061e:	4b42      	ldr	r3, [pc, #264]	@ (8000728 <lcd_init+0x110>)
 8000620:	607b      	str	r3, [r7, #4]
	lcd_signal.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000622:	2301      	movs	r3, #1
 8000624:	727b      	strb	r3, [r7, #9]
	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_RS;
 8000626:	2300      	movs	r3, #0
 8000628:	723b      	strb	r3, [r7, #8]
	lcd_signal.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800062a:	2300      	movs	r3, #0
 800062c:	733b      	strb	r3, [r7, #12]
	lcd_signal.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800062e:	2300      	movs	r3, #0
 8000630:	72fb      	strb	r3, [r7, #11]
	lcd_signal.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000632:	2302      	movs	r3, #2
 8000634:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(&lcd_signal);
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	4618      	mov	r0, r3
 800063a:	f000 fcb1 	bl	8000fa0 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_RW;
 800063e:	2301      	movs	r3, #1
 8000640:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	4618      	mov	r0, r3
 8000646:	f000 fcab 	bl	8000fa0 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_EN;
 800064a:	2302      	movs	r3, #2
 800064c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	4618      	mov	r0, r3
 8000652:	f000 fca5 	bl	8000fa0 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D4;
 8000656:	2303      	movs	r3, #3
 8000658:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	4618      	mov	r0, r3
 800065e:	f000 fc9f 	bl	8000fa0 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D5;
 8000662:	2304      	movs	r3, #4
 8000664:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	4618      	mov	r0, r3
 800066a:	f000 fc99 	bl	8000fa0 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D6;
 800066e:	2305      	movs	r3, #5
 8000670:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	4618      	mov	r0, r3
 8000676:	f000 fc93 	bl	8000fa0 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D7;
 800067a:	2306      	movs	r3, #6
 800067c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	4618      	mov	r0, r3
 8000682:	f000 fc8d 	bl	8000fa0 <GPIO_Init>

	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	2100      	movs	r1, #0
 800068a:	4827      	ldr	r0, [pc, #156]	@ (8000728 <lcd_init+0x110>)
 800068c:	f000 fe24 	bl	80012d8 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000690:	2200      	movs	r2, #0
 8000692:	2101      	movs	r1, #1
 8000694:	4824      	ldr	r0, [pc, #144]	@ (8000728 <lcd_init+0x110>)
 8000696:	f000 fe1f 	bl	80012d8 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	2102      	movs	r1, #2
 800069e:	4822      	ldr	r0, [pc, #136]	@ (8000728 <lcd_init+0x110>)
 80006a0:	f000 fe1a 	bl	80012d8 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D4, GPIO_PIN_RESET);
 80006a4:	2200      	movs	r2, #0
 80006a6:	2103      	movs	r1, #3
 80006a8:	481f      	ldr	r0, [pc, #124]	@ (8000728 <lcd_init+0x110>)
 80006aa:	f000 fe15 	bl	80012d8 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D5, GPIO_PIN_RESET);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2104      	movs	r1, #4
 80006b2:	481d      	ldr	r0, [pc, #116]	@ (8000728 <lcd_init+0x110>)
 80006b4:	f000 fe10 	bl	80012d8 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D6, GPIO_PIN_RESET);
 80006b8:	2200      	movs	r2, #0
 80006ba:	2105      	movs	r1, #5
 80006bc:	481a      	ldr	r0, [pc, #104]	@ (8000728 <lcd_init+0x110>)
 80006be:	f000 fe0b 	bl	80012d8 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D7, GPIO_PIN_RESET);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2106      	movs	r1, #6
 80006c6:	4818      	ldr	r0, [pc, #96]	@ (8000728 <lcd_init+0x110>)
 80006c8:	f000 fe06 	bl	80012d8 <GPIO_WriteToOutputPin>

	//2. Do the LCD initialization

	mdelay(40);
 80006cc:	2028      	movs	r0, #40	@ 0x28
 80006ce:	f000 f8b7 	bl	8000840 <mdelay>

	/*RS = 0 , For LCD command */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2100      	movs	r1, #0
 80006d6:	4814      	ldr	r0, [pc, #80]	@ (8000728 <lcd_init+0x110>)
 80006d8:	f000 fdfe 	bl	80012d8 <GPIO_WriteToOutputPin>

	/* RnW = 0, Writing to LCD */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 80006dc:	2200      	movs	r2, #0
 80006de:	2101      	movs	r1, #1
 80006e0:	4811      	ldr	r0, [pc, #68]	@ (8000728 <lcd_init+0x110>)
 80006e2:	f000 fdf9 	bl	80012d8 <GPIO_WriteToOutputPin>

	write_4_bits(0x3);
 80006e6:	2003      	movs	r0, #3
 80006e8:	f000 f820 	bl	800072c <write_4_bits>

	mdelay(5);
 80006ec:	2005      	movs	r0, #5
 80006ee:	f000 f8a7 	bl	8000840 <mdelay>

	write_4_bits(0x3);
 80006f2:	2003      	movs	r0, #3
 80006f4:	f000 f81a 	bl	800072c <write_4_bits>

	udelay(150);
 80006f8:	2096      	movs	r0, #150	@ 0x96
 80006fa:	f000 f8b9 	bl	8000870 <udelay>

	write_4_bits(0x3);
 80006fe:	2003      	movs	r0, #3
 8000700:	f000 f814 	bl	800072c <write_4_bits>
	write_4_bits(0x2);
 8000704:	2002      	movs	r0, #2
 8000706:	f000 f811 	bl	800072c <write_4_bits>

	//function set command
	lcd_send_command(LCD_CMD_4DL_2N_5X8F);
 800070a:	2028      	movs	r0, #40	@ 0x28
 800070c:	f7ff ff2c 	bl	8000568 <lcd_send_command>

	//disply ON and cursor ON
	lcd_send_command(LCD_CMD_DON_CURON);
 8000710:	200e      	movs	r0, #14
 8000712:	f7ff ff29 	bl	8000568 <lcd_send_command>

	lcd_display_clear();
 8000716:	f000 f841 	bl	800079c <lcd_display_clear>

	//entry mode set
	lcd_send_command(LCD_CMD_INCADD);
 800071a:	2006      	movs	r0, #6
 800071c:	f7ff ff24 	bl	8000568 <lcd_send_command>



}
 8000720:	bf00      	nop
 8000722:	3710      	adds	r7, #16
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40020c00 	.word	0x40020c00

0800072c <write_4_bits>:

/* writes 4 bits of data/command on to D4,D5,D6,D7 lines */
static void write_4_bits(uint8_t value)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]
	GPIO_WriteToOutputPin(LCD_GPIO_PORT,LCD_GPIO_D4, ((value >> 0) & 0x1) );
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	f003 0301 	and.w	r3, r3, #1
 800073c:	b2db      	uxtb	r3, r3
 800073e:	461a      	mov	r2, r3
 8000740:	2103      	movs	r1, #3
 8000742:	4815      	ldr	r0, [pc, #84]	@ (8000798 <write_4_bits+0x6c>)
 8000744:	f000 fdc8 	bl	80012d8 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT,LCD_GPIO_D5, ((value >> 1) & 0x1) );
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	085b      	lsrs	r3, r3, #1
 800074c:	b2db      	uxtb	r3, r3
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	b2db      	uxtb	r3, r3
 8000754:	461a      	mov	r2, r3
 8000756:	2104      	movs	r1, #4
 8000758:	480f      	ldr	r0, [pc, #60]	@ (8000798 <write_4_bits+0x6c>)
 800075a:	f000 fdbd 	bl	80012d8 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT,LCD_GPIO_D6, ((value >> 2) & 0x1) );
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	089b      	lsrs	r3, r3, #2
 8000762:	b2db      	uxtb	r3, r3
 8000764:	f003 0301 	and.w	r3, r3, #1
 8000768:	b2db      	uxtb	r3, r3
 800076a:	461a      	mov	r2, r3
 800076c:	2105      	movs	r1, #5
 800076e:	480a      	ldr	r0, [pc, #40]	@ (8000798 <write_4_bits+0x6c>)
 8000770:	f000 fdb2 	bl	80012d8 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT,LCD_GPIO_D7, ((value >> 3) & 0x1) );
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	08db      	lsrs	r3, r3, #3
 8000778:	b2db      	uxtb	r3, r3
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	b2db      	uxtb	r3, r3
 8000780:	461a      	mov	r2, r3
 8000782:	2106      	movs	r1, #6
 8000784:	4804      	ldr	r0, [pc, #16]	@ (8000798 <write_4_bits+0x6c>)
 8000786:	f000 fda7 	bl	80012d8 <GPIO_WriteToOutputPin>

	lcd_enable();
 800078a:	f000 f843 	bl	8000814 <lcd_enable>

}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40020c00 	.word	0x40020c00

0800079c <lcd_display_clear>:

void lcd_display_clear(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	//Display clear
	lcd_send_command(LCD_CMD_DIS_CLEAR);
 80007a0:	2001      	movs	r0, #1
 80007a2:	f7ff fee1 	bl	8000568 <lcd_send_command>
	/*
	 * check page number 24 of datasheet.
	 * display clear command execution wait time is around 2ms
	 */

	mdelay(2);
 80007a6:	2002      	movs	r0, #2
 80007a8:	f000 f84a 	bl	8000840 <mdelay>
}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <lcd_display_return_home>:


/*Cursor returns to home position */
void lcd_display_return_home(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0

	lcd_send_command(LCD_CMD_DIS_RETURN_HOME);
 80007b4:	2002      	movs	r0, #2
 80007b6:	f7ff fed7 	bl	8000568 <lcd_send_command>
	/*
	 * check page number 24 of datasheet.
	 * return home command execution wait time is around 2ms
	 */
	mdelay(2);
 80007ba:	2002      	movs	r0, #2
 80007bc:	f000 f840 	bl	8000840 <mdelay>
}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <lcd_set_cursor>:
  *   Set Lcd to a specified location given by row and column information
  *   Row Number (1 to 2)
  *   Column Number (1 to 16) Assuming a 2 X 16 characters display
  */
void lcd_set_cursor(uint8_t row, uint8_t column)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	460a      	mov	r2, r1
 80007ce:	71fb      	strb	r3, [r7, #7]
 80007d0:	4613      	mov	r3, r2
 80007d2:	71bb      	strb	r3, [r7, #6]
  column--;
 80007d4:	79bb      	ldrb	r3, [r7, #6]
 80007d6:	3b01      	subs	r3, #1
 80007d8:	71bb      	strb	r3, [r7, #6]
  switch (row)
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	2b01      	cmp	r3, #1
 80007de:	d002      	beq.n	80007e6 <lcd_set_cursor+0x22>
 80007e0:	2b02      	cmp	r3, #2
 80007e2:	d009      	beq.n	80007f8 <lcd_set_cursor+0x34>
    case 2:
      /* Set cursor to 2nd row address and add index*/
        lcd_send_command((column |= 0xC0));
      break;
    default:
      break;
 80007e4:	e011      	b.n	800080a <lcd_set_cursor+0x46>
      lcd_send_command((column |= 0x80));
 80007e6:	79bb      	ldrb	r3, [r7, #6]
 80007e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80007ec:	71bb      	strb	r3, [r7, #6]
 80007ee:	79bb      	ldrb	r3, [r7, #6]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff feb9 	bl	8000568 <lcd_send_command>
      break;
 80007f6:	e008      	b.n	800080a <lcd_set_cursor+0x46>
        lcd_send_command((column |= 0xC0));
 80007f8:	79bb      	ldrb	r3, [r7, #6]
 80007fa:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 80007fe:	71bb      	strb	r3, [r7, #6]
 8000800:	79bb      	ldrb	r3, [r7, #6]
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff feb0 	bl	8000568 <lcd_send_command>
      break;
 8000808:	bf00      	nop
  }
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
	...

08000814 <lcd_enable>:



static void lcd_enable(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_SET);
 8000818:	2201      	movs	r2, #1
 800081a:	2102      	movs	r1, #2
 800081c:	4807      	ldr	r0, [pc, #28]	@ (800083c <lcd_enable+0x28>)
 800081e:	f000 fd5b 	bl	80012d8 <GPIO_WriteToOutputPin>
	udelay(10);
 8000822:	200a      	movs	r0, #10
 8000824:	f000 f824 	bl	8000870 <udelay>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
 8000828:	2200      	movs	r2, #0
 800082a:	2102      	movs	r1, #2
 800082c:	4803      	ldr	r0, [pc, #12]	@ (800083c <lcd_enable+0x28>)
 800082e:	f000 fd53 	bl	80012d8 <GPIO_WriteToOutputPin>
	udelay(100);/* execution time > 37 micro seconds */
 8000832:	2064      	movs	r0, #100	@ 0x64
 8000834:	f000 f81c 	bl	8000870 <udelay>
}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40020c00 	.word	0x40020c00

08000840 <mdelay>:


static void mdelay(uint32_t cnt)
{
 8000840:	b480      	push	{r7}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0 ; i < (cnt * 1000); i++);
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	e002      	b.n	8000854 <mdelay+0x14>
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	3301      	adds	r3, #1
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800085a:	fb02 f303 	mul.w	r3, r2, r3
 800085e:	68fa      	ldr	r2, [r7, #12]
 8000860:	429a      	cmp	r2, r3
 8000862:	d3f4      	bcc.n	800084e <mdelay+0xe>
}
 8000864:	bf00      	nop
 8000866:	bf00      	nop
 8000868:	3714      	adds	r7, #20
 800086a:	46bd      	mov	sp, r7
 800086c:	bc80      	pop	{r7}
 800086e:	4770      	bx	lr

08000870 <udelay>:

static void udelay(uint32_t cnt)
{
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0 ; i < (cnt * 1); i++);
 8000878:	2300      	movs	r3, #0
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	e002      	b.n	8000884 <udelay+0x14>
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	3301      	adds	r3, #1
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fa      	ldr	r2, [r7, #12]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	429a      	cmp	r2, r3
 800088a:	d3f8      	bcc.n	800087e <udelay+0xe>
}
 800088c:	bf00      	nop
 800088e:	bf00      	nop
 8000890:	3714      	adds	r7, #20
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr

08000898 <init_systick_timer>:
/* Enable this macro if you want to test RTC on LCD */
#define PRINT_LCD


void init_systick_timer(uint32_t tick_hz)
{
 8000898:	b480      	push	{r7}
 800089a:	b087      	sub	sp, #28
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 80008a0:	4b14      	ldr	r3, [pc, #80]	@ (80008f4 <init_systick_timer+0x5c>)
 80008a2:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 80008a4:	4b14      	ldr	r3, [pc, #80]	@ (80008f8 <init_systick_timer+0x60>)
 80008a6:	613b      	str	r3, [r7, #16]

    /* calculation of reload value */
    uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;
 80008a8:	4a14      	ldr	r2, [pc, #80]	@ (80008fc <init_systick_timer+0x64>)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80008b0:	3b01      	subs	r3, #1
 80008b2:	60fb      	str	r3, [r7, #12]

    //Clear the value of SVR
    *pSRVR &= ~(0x00FFFFFFFF);
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]

    //load the value in to SVR
    *pSRVR |= count_value;
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	431a      	orrs	r2, r3
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	601a      	str	r2, [r3, #0]

    //do some settings
    *pSCSR |= ( 1 << 1); //Enables SysTick exception request:
 80008c6:	693b      	ldr	r3, [r7, #16]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	f043 0202 	orr.w	r2, r3, #2
 80008ce:	693b      	ldr	r3, [r7, #16]
 80008d0:	601a      	str	r2, [r3, #0]
    *pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source
 80008d2:	693b      	ldr	r3, [r7, #16]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f043 0204 	orr.w	r2, r3, #4
 80008da:	693b      	ldr	r3, [r7, #16]
 80008dc:	601a      	str	r2, [r3, #0]

    //enable the systick
    *pSCSR |= ( 1 << 0); //enables the counter
 80008de:	693b      	ldr	r3, [r7, #16]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	f043 0201 	orr.w	r2, r3, #1
 80008e6:	693b      	ldr	r3, [r7, #16]
 80008e8:	601a      	str	r2, [r3, #0]

}
 80008ea:	bf00      	nop
 80008ec:	371c      	adds	r7, #28
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr
 80008f4:	e000e014 	.word	0xe000e014
 80008f8:	e000e010 	.word	0xe000e010
 80008fc:	00f42400 	.word	0x00f42400

08000900 <get_day_of_week>:


char* get_day_of_week(uint8_t i)
{
 8000900:	b4b0      	push	{r4, r5, r7}
 8000902:	b08b      	sub	sp, #44	@ 0x2c
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	71fb      	strb	r3, [r7, #7]
	char* days[] = { "Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
 800090a:	4b0b      	ldr	r3, [pc, #44]	@ (8000938 <get_day_of_week+0x38>)
 800090c:	f107 040c 	add.w	r4, r7, #12
 8000910:	461d      	mov	r5, r3
 8000912:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000914:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000916:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800091a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	return days[i-1];
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	3b01      	subs	r3, #1
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	3328      	adds	r3, #40	@ 0x28
 8000926:	443b      	add	r3, r7
 8000928:	f853 3c1c 	ldr.w	r3, [r3, #-28]
}
 800092c:	4618      	mov	r0, r3
 800092e:	372c      	adds	r7, #44	@ 0x2c
 8000930:	46bd      	mov	sp, r7
 8000932:	bcb0      	pop	{r4, r5, r7}
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	08002320 	.word	0x08002320

0800093c <number_to_string>:


void number_to_string(uint8_t num , char* buf)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	6039      	str	r1, [r7, #0]
 8000946:	71fb      	strb	r3, [r7, #7]

	if(num < 10){
 8000948:	79fb      	ldrb	r3, [r7, #7]
 800094a:	2b09      	cmp	r3, #9
 800094c:	d809      	bhi.n	8000962 <number_to_string+0x26>
		buf[0] = '0';
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	2230      	movs	r2, #48	@ 0x30
 8000952:	701a      	strb	r2, [r3, #0]
		buf[1] = num+48;
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	3301      	adds	r3, #1
 8000958:	79fa      	ldrb	r2, [r7, #7]
 800095a:	3230      	adds	r2, #48	@ 0x30
 800095c:	b2d2      	uxtb	r2, r2
 800095e:	701a      	strb	r2, [r3, #0]
	}else if(num >= 10 && num < 99)
	{
		buf[0] = (num/10) + 48;
		buf[1]= (num % 10) + 48;
	}
}
 8000960:	e01f      	b.n	80009a2 <number_to_string+0x66>
	}else if(num >= 10 && num < 99)
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	2b09      	cmp	r3, #9
 8000966:	d91c      	bls.n	80009a2 <number_to_string+0x66>
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	2b62      	cmp	r3, #98	@ 0x62
 800096c:	d819      	bhi.n	80009a2 <number_to_string+0x66>
		buf[0] = (num/10) + 48;
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	4a0e      	ldr	r2, [pc, #56]	@ (80009ac <number_to_string+0x70>)
 8000972:	fba2 2303 	umull	r2, r3, r2, r3
 8000976:	08db      	lsrs	r3, r3, #3
 8000978:	b2db      	uxtb	r3, r3
 800097a:	3330      	adds	r3, #48	@ 0x30
 800097c:	b2da      	uxtb	r2, r3
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	701a      	strb	r2, [r3, #0]
		buf[1]= (num % 10) + 48;
 8000982:	79fa      	ldrb	r2, [r7, #7]
 8000984:	4b09      	ldr	r3, [pc, #36]	@ (80009ac <number_to_string+0x70>)
 8000986:	fba3 1302 	umull	r1, r3, r3, r2
 800098a:	08d9      	lsrs	r1, r3, #3
 800098c:	460b      	mov	r3, r1
 800098e:	009b      	lsls	r3, r3, #2
 8000990:	440b      	add	r3, r1
 8000992:	005b      	lsls	r3, r3, #1
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	b2da      	uxtb	r2, r3
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	3301      	adds	r3, #1
 800099c:	3230      	adds	r2, #48	@ 0x30
 800099e:	b2d2      	uxtb	r2, r2
 80009a0:	701a      	strb	r2, [r3, #0]
}
 80009a2:	bf00      	nop
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr
 80009ac:	cccccccd 	.word	0xcccccccd

080009b0 <time_to_string>:



//hh:mm:ss
char* time_to_string(RTC_time_t *rtc_time)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	static char buf[9];

	buf[2]= ':';
 80009b8:	4b0f      	ldr	r3, [pc, #60]	@ (80009f8 <time_to_string+0x48>)
 80009ba:	223a      	movs	r2, #58	@ 0x3a
 80009bc:	709a      	strb	r2, [r3, #2]
	buf[5]= ':';
 80009be:	4b0e      	ldr	r3, [pc, #56]	@ (80009f8 <time_to_string+0x48>)
 80009c0:	223a      	movs	r2, #58	@ 0x3a
 80009c2:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_time->hours,buf);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	789b      	ldrb	r3, [r3, #2]
 80009c8:	490b      	ldr	r1, [pc, #44]	@ (80009f8 <time_to_string+0x48>)
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff ffb6 	bl	800093c <number_to_string>
	number_to_string(rtc_time->minutes,&buf[3]);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	785b      	ldrb	r3, [r3, #1]
 80009d4:	4909      	ldr	r1, [pc, #36]	@ (80009fc <time_to_string+0x4c>)
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff ffb0 	bl	800093c <number_to_string>
	number_to_string(rtc_time->seconds,&buf[6]);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	4907      	ldr	r1, [pc, #28]	@ (8000a00 <time_to_string+0x50>)
 80009e2:	4618      	mov	r0, r3
 80009e4:	f7ff ffaa 	bl	800093c <number_to_string>

	buf[8] = '\0';
 80009e8:	4b03      	ldr	r3, [pc, #12]	@ (80009f8 <time_to_string+0x48>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	721a      	strb	r2, [r3, #8]

	return buf;
 80009ee:	4b02      	ldr	r3, [pc, #8]	@ (80009f8 <time_to_string+0x48>)

}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	200000b4 	.word	0x200000b4
 80009fc:	200000b7 	.word	0x200000b7
 8000a00:	200000ba 	.word	0x200000ba

08000a04 <date_to_string>:

//dd/mm/yy
char* date_to_string(RTC_date_t *rtc_date)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	static char buf[9];

	buf[2]= '/';
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a4c <date_to_string+0x48>)
 8000a0e:	222f      	movs	r2, #47	@ 0x2f
 8000a10:	709a      	strb	r2, [r3, #2]
	buf[5]= '/';
 8000a12:	4b0e      	ldr	r3, [pc, #56]	@ (8000a4c <date_to_string+0x48>)
 8000a14:	222f      	movs	r2, #47	@ 0x2f
 8000a16:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_date->date,buf);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	490b      	ldr	r1, [pc, #44]	@ (8000a4c <date_to_string+0x48>)
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff ff8c 	bl	800093c <number_to_string>
	number_to_string(rtc_date->month,&buf[3]);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	785b      	ldrb	r3, [r3, #1]
 8000a28:	4909      	ldr	r1, [pc, #36]	@ (8000a50 <date_to_string+0x4c>)
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f7ff ff86 	bl	800093c <number_to_string>
	number_to_string(rtc_date->year,&buf[6]);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	789b      	ldrb	r3, [r3, #2]
 8000a34:	4907      	ldr	r1, [pc, #28]	@ (8000a54 <date_to_string+0x50>)
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff ff80 	bl	800093c <number_to_string>

	buf[8]= '\0';
 8000a3c:	4b03      	ldr	r3, [pc, #12]	@ (8000a4c <date_to_string+0x48>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	721a      	strb	r2, [r3, #8]

	return buf;
 8000a42:	4b02      	ldr	r3, [pc, #8]	@ (8000a4c <date_to_string+0x48>)

}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	200000c0 	.word	0x200000c0
 8000a50:	200000c3 	.word	0x200000c3
 8000a54:	200000c6 	.word	0x200000c6

08000a58 <mdelay>:

static void mdelay(uint32_t cnt)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0 ; i < (cnt * 1000); i++);
 8000a60:	2300      	movs	r3, #0
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	e002      	b.n	8000a6c <mdelay+0x14>
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a72:	fb02 f303 	mul.w	r3, r2, r3
 8000a76:	68fa      	ldr	r2, [r7, #12]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d3f4      	bcc.n	8000a66 <mdelay+0xe>
}
 8000a7c:	bf00      	nop
 8000a7e:	bf00      	nop
 8000a80:	3714      	adds	r7, #20
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr

08000a88 <main>:

int main(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
	RTC_date_t current_date;

#ifndef PRINT_LCD
	printf("RTC test\n");
#else
	lcd_init();
 8000a8e:	f7ff fdc3 	bl	8000618 <lcd_init>

	lcd_print_string("RTC Test...");
 8000a92:	4834      	ldr	r0, [pc, #208]	@ (8000b64 <main+0xdc>)
 8000a94:	f7ff fdac 	bl	80005f0 <lcd_print_string>


	mdelay(2000);
 8000a98:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a9c:	f7ff ffdc 	bl	8000a58 <mdelay>

	lcd_display_clear();
 8000aa0:	f7ff fe7c 	bl	800079c <lcd_display_clear>
	lcd_display_return_home();
 8000aa4:	f7ff fe84 	bl	80007b0 <lcd_display_return_home>
#endif

	if(ds1307_init()){
 8000aa8:	f7ff fbcc 	bl	8000244 <ds1307_init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d004      	beq.n	8000abc <main+0x34>
		printf("RTC init has failed\n");
 8000ab2:	482d      	ldr	r0, [pc, #180]	@ (8000b68 <main+0xe0>)
 8000ab4:	f001 f876 	bl	8001ba4 <puts>
		while(1);
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <main+0x30>
	}

	init_systick_timer(1);
 8000abc:	2001      	movs	r0, #1
 8000abe:	f7ff feeb 	bl	8000898 <init_systick_timer>

	current_date.day = FRIDAY;
 8000ac2:	2306      	movs	r3, #6
 8000ac4:	71fb      	strb	r3, [r7, #7]
	current_date.date = 15;
 8000ac6:	230f      	movs	r3, #15
 8000ac8:	713b      	strb	r3, [r7, #4]
	current_date.month = 1;
 8000aca:	2301      	movs	r3, #1
 8000acc:	717b      	strb	r3, [r7, #5]
	current_date.year = 21;
 8000ace:	2315      	movs	r3, #21
 8000ad0:	71bb      	strb	r3, [r7, #6]

	current_time.hours = 11;
 8000ad2:	230b      	movs	r3, #11
 8000ad4:	72bb      	strb	r3, [r7, #10]
	current_time.minutes = 59;
 8000ad6:	233b      	movs	r3, #59	@ 0x3b
 8000ad8:	727b      	strb	r3, [r7, #9]
	current_time.seconds = 30;
 8000ada:	231e      	movs	r3, #30
 8000adc:	723b      	strb	r3, [r7, #8]
	current_time.time_format = TIME_FORMAT_12HRS_PM;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	72fb      	strb	r3, [r7, #11]

	ds1307_set_current_date(&current_date);
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff fc14 	bl	8000312 <ds1307_set_current_date>
	ds1307_set_current_time(&current_time);
 8000aea:	f107 0308 	add.w	r3, r7, #8
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff fbc6 	bl	8000280 <ds1307_set_current_time>

	ds1307_get_current_time(&current_time);
 8000af4:	f107 0308 	add.w	r3, r7, #8
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff fc3a 	bl	8000372 <ds1307_get_current_time>
	ds1307_get_current_date(&current_date);
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff fc7c 	bl	80003fe <ds1307_get_current_date>

	char *am_pm;
	if(current_time.time_format != TIME_FORMAT_24HRS){
 8000b06:	7afb      	ldrb	r3, [r7, #11]
 8000b08:	2b02      	cmp	r3, #2
 8000b0a:	d013      	beq.n	8000b34 <main+0xac>
		am_pm = (current_time.time_format) ? "PM" : "AM";
 8000b0c:	7afb      	ldrb	r3, [r7, #11]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <main+0x8e>
 8000b12:	4b16      	ldr	r3, [pc, #88]	@ (8000b6c <main+0xe4>)
 8000b14:	e000      	b.n	8000b18 <main+0x90>
 8000b16:	4b16      	ldr	r3, [pc, #88]	@ (8000b70 <main+0xe8>)
 8000b18:	60fb      	str	r3, [r7, #12]
#ifndef PRINT_LCD
		printf("Current time = %s %s\n",time_to_string(&current_time),am_pm); // 04:25:41 PM
#else
		lcd_print_string(time_to_string(&current_time));
 8000b1a:	f107 0308 	add.w	r3, r7, #8
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff ff46 	bl	80009b0 <time_to_string>
 8000b24:	4603      	mov	r3, r0
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff fd62 	bl	80005f0 <lcd_print_string>
		lcd_print_string(am_pm);
 8000b2c:	68f8      	ldr	r0, [r7, #12]
 8000b2e:	f7ff fd5f 	bl	80005f0 <lcd_print_string>
 8000b32:	e008      	b.n	8000b46 <main+0xbe>
#endif
	}else{
#ifndef PRINT_LCD
		printf("Current time = %s\n",time_to_string(&current_time)); // 04:25:41
#else
		lcd_print_string(time_to_string(&current_time));
 8000b34:	f107 0308 	add.w	r3, r7, #8
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff ff39 	bl	80009b0 <time_to_string>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff fd55 	bl	80005f0 <lcd_print_string>
	}

#ifndef PRINT_LCD
	printf("Current date = %s <%s>\n",date_to_string(&current_date), get_day_of_week(current_date.day));
#else
	lcd_set_cursor(2, 1);
 8000b46:	2101      	movs	r1, #1
 8000b48:	2002      	movs	r0, #2
 8000b4a:	f7ff fe3b 	bl	80007c4 <lcd_set_cursor>
	lcd_print_string(date_to_string(&current_date));
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff ff57 	bl	8000a04 <date_to_string>
 8000b56:	4603      	mov	r3, r0
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff fd49 	bl	80005f0 <lcd_print_string>
#endif


	while(1);
 8000b5e:	bf00      	nop
 8000b60:	e7fd      	b.n	8000b5e <main+0xd6>
 8000b62:	bf00      	nop
 8000b64:	0800233c 	.word	0x0800233c
 8000b68:	08002348 	.word	0x08002348
 8000b6c:	0800235c 	.word	0x0800235c
 8000b70:	08002360 	.word	0x08002360

08000b74 <SysTick_Handler>:
	return 0;
}


void SysTick_Handler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
	RTC_time_t current_time;
	RTC_date_t current_date;

	ds1307_get_current_time(&current_time);
 8000b7a:	f107 0308 	add.w	r3, r7, #8
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff fbf7 	bl	8000372 <ds1307_get_current_time>

	char *am_pm;
	if(current_time.time_format != TIME_FORMAT_24HRS){
 8000b84:	7afb      	ldrb	r3, [r7, #11]
 8000b86:	2b02      	cmp	r3, #2
 8000b88:	d017      	beq.n	8000bba <SysTick_Handler+0x46>
		am_pm = (current_time.time_format) ? "PM" : "AM";
 8000b8a:	7afb      	ldrb	r3, [r7, #11]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <SysTick_Handler+0x20>
 8000b90:	4b21      	ldr	r3, [pc, #132]	@ (8000c18 <SysTick_Handler+0xa4>)
 8000b92:	e000      	b.n	8000b96 <SysTick_Handler+0x22>
 8000b94:	4b21      	ldr	r3, [pc, #132]	@ (8000c1c <SysTick_Handler+0xa8>)
 8000b96:	60fb      	str	r3, [r7, #12]
#ifndef PRINT_LCD
		printf("Current time = %s %s\n",time_to_string(&current_time),am_pm); // 04:25:41 PM
#else
		lcd_set_cursor(1, 1);
 8000b98:	2101      	movs	r1, #1
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	f7ff fe12 	bl	80007c4 <lcd_set_cursor>
		lcd_print_string(time_to_string(&current_time));
 8000ba0:	f107 0308 	add.w	r3, r7, #8
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff ff03 	bl	80009b0 <time_to_string>
 8000baa:	4603      	mov	r3, r0
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff fd1f 	bl	80005f0 <lcd_print_string>
		lcd_print_string(am_pm);
 8000bb2:	68f8      	ldr	r0, [r7, #12]
 8000bb4:	f7ff fd1c 	bl	80005f0 <lcd_print_string>
 8000bb8:	e00c      	b.n	8000bd4 <SysTick_Handler+0x60>

	}else{
#ifndef PRINT_LCD
		printf("Current time = %s\n",time_to_string(&current_time)); // 04:25:41
#else
		lcd_set_cursor(1, 1);
 8000bba:	2101      	movs	r1, #1
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	f7ff fe01 	bl	80007c4 <lcd_set_cursor>
		lcd_print_string(time_to_string(&current_time));
 8000bc2:	f107 0308 	add.w	r3, r7, #8
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff fef2 	bl	80009b0 <time_to_string>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff fd0e 	bl	80005f0 <lcd_print_string>
#endif
	}

	ds1307_get_current_date(&current_date);
 8000bd4:	1d3b      	adds	r3, r7, #4
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff fc11 	bl	80003fe <ds1307_get_current_date>

#ifndef PRINT_LCD
	printf("Current date = %s <%s>\n",date_to_string(&current_date), get_day_of_week(current_date.day));
#else
	lcd_set_cursor(2, 1);
 8000bdc:	2101      	movs	r1, #1
 8000bde:	2002      	movs	r0, #2
 8000be0:	f7ff fdf0 	bl	80007c4 <lcd_set_cursor>
	lcd_print_string(date_to_string(&current_date));
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff ff0c 	bl	8000a04 <date_to_string>
 8000bec:	4603      	mov	r3, r0
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fcfe 	bl	80005f0 <lcd_print_string>
	lcd_print_char('<');
 8000bf4:	203c      	movs	r0, #60	@ 0x3c
 8000bf6:	f7ff fcd9 	bl	80005ac <lcd_print_char>
	lcd_print_string(get_day_of_week(current_date.day));
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff fe7f 	bl	8000900 <get_day_of_week>
 8000c02:	4603      	mov	r3, r0
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff fcf3 	bl	80005f0 <lcd_print_string>
	lcd_print_char('>');
 8000c0a:	203e      	movs	r0, #62	@ 0x3e
 8000c0c:	f7ff fcce 	bl	80005ac <lcd_print_char>
#endif


}
 8000c10:	bf00      	nop
 8000c12:	3710      	adds	r7, #16
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	0800235c 	.word	0x0800235c
 8000c1c:	08002360 	.word	0x08002360

08000c20 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c64 <ITM_SendChar+0x44>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a0d      	ldr	r2, [pc, #52]	@ (8000c64 <ITM_SendChar+0x44>)
 8000c30:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000c34:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000c36:	4b0c      	ldr	r3, [pc, #48]	@ (8000c68 <ITM_SendChar+0x48>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a0b      	ldr	r2, [pc, #44]	@ (8000c68 <ITM_SendChar+0x48>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000c42:	bf00      	nop
 8000c44:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d0f8      	beq.n	8000c44 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000c52:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	6013      	str	r3, [r2, #0]
}
 8000c5a:	bf00      	nop
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr
 8000c64:	e000edfc 	.word	0xe000edfc
 8000c68:	e0000e00 	.word	0xe0000e00

08000c6c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	e00a      	b.n	8000c94 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c7e:	f3af 8000 	nop.w
 8000c82:	4601      	mov	r1, r0
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	1c5a      	adds	r2, r3, #1
 8000c88:	60ba      	str	r2, [r7, #8]
 8000c8a:	b2ca      	uxtb	r2, r1
 8000c8c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	3301      	adds	r3, #1
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	697a      	ldr	r2, [r7, #20]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	dbf0      	blt.n	8000c7e <_read+0x12>
  }

  return len;
 8000c9c:	687b      	ldr	r3, [r7, #4]
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3718      	adds	r7, #24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b086      	sub	sp, #24
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	60f8      	str	r0, [r7, #12]
 8000cae:	60b9      	str	r1, [r7, #8]
 8000cb0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]
 8000cb6:	e009      	b.n	8000ccc <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	1c5a      	adds	r2, r3, #1
 8000cbc:	60ba      	str	r2, [r7, #8]
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff ffad 	bl	8000c20 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	617b      	str	r3, [r7, #20]
 8000ccc:	697a      	ldr	r2, [r7, #20]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	dbf1      	blt.n	8000cb8 <_write+0x12>
  }
  return len;
 8000cd4:	687b      	ldr	r3, [r7, #4]
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3718      	adds	r7, #24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <_close>:

int _close(int file)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	b083      	sub	sp, #12
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ce6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bc80      	pop	{r7}
 8000cf2:	4770      	bx	lr

08000cf4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d04:	605a      	str	r2, [r3, #4]
  return 0;
 8000d06:	2300      	movs	r3, #0
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bc80      	pop	{r7}
 8000d10:	4770      	bx	lr

08000d12 <_isatty>:

int _isatty(int file)
{
 8000d12:	b480      	push	{r7}
 8000d14:	b083      	sub	sp, #12
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d1a:	2301      	movs	r3, #1
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc80      	pop	{r7}
 8000d24:	4770      	bx	lr

08000d26 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d26:	b480      	push	{r7}
 8000d28:	b085      	sub	sp, #20
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	60f8      	str	r0, [r7, #12]
 8000d2e:	60b9      	str	r1, [r7, #8]
 8000d30:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d32:	2300      	movs	r3, #0
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3714      	adds	r7, #20
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bc80      	pop	{r7}
 8000d3c:	4770      	bx	lr
	...

08000d40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d48:	4a14      	ldr	r2, [pc, #80]	@ (8000d9c <_sbrk+0x5c>)
 8000d4a:	4b15      	ldr	r3, [pc, #84]	@ (8000da0 <_sbrk+0x60>)
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d54:	4b13      	ldr	r3, [pc, #76]	@ (8000da4 <_sbrk+0x64>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d102      	bne.n	8000d62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d5c:	4b11      	ldr	r3, [pc, #68]	@ (8000da4 <_sbrk+0x64>)
 8000d5e:	4a12      	ldr	r2, [pc, #72]	@ (8000da8 <_sbrk+0x68>)
 8000d60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d62:	4b10      	ldr	r3, [pc, #64]	@ (8000da4 <_sbrk+0x64>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4413      	add	r3, r2
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d207      	bcs.n	8000d80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d70:	f001 f846 	bl	8001e00 <__errno>
 8000d74:	4603      	mov	r3, r0
 8000d76:	220c      	movs	r2, #12
 8000d78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7e:	e009      	b.n	8000d94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d80:	4b08      	ldr	r3, [pc, #32]	@ (8000da4 <_sbrk+0x64>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d86:	4b07      	ldr	r3, [pc, #28]	@ (8000da4 <_sbrk+0x64>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	4a05      	ldr	r2, [pc, #20]	@ (8000da4 <_sbrk+0x64>)
 8000d90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d92:	68fb      	ldr	r3, [r7, #12]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3718      	adds	r7, #24
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20020000 	.word	0x20020000
 8000da0:	00000400 	.word	0x00000400
 8000da4:	200000cc 	.word	0x200000cc
 8000da8:	20000220 	.word	0x20000220

08000dac <Reset_Handler>:
 8000dac:	480d      	ldr	r0, [pc, #52]	@ (8000de4 <LoopForever+0x2>)
 8000dae:	4685      	mov	sp, r0
 8000db0:	f3af 8000 	nop.w
 8000db4:	480c      	ldr	r0, [pc, #48]	@ (8000de8 <LoopForever+0x6>)
 8000db6:	490d      	ldr	r1, [pc, #52]	@ (8000dec <LoopForever+0xa>)
 8000db8:	4a0d      	ldr	r2, [pc, #52]	@ (8000df0 <LoopForever+0xe>)
 8000dba:	2300      	movs	r3, #0
 8000dbc:	e002      	b.n	8000dc4 <LoopCopyDataInit>

08000dbe <CopyDataInit>:
 8000dbe:	58d4      	ldr	r4, [r2, r3]
 8000dc0:	50c4      	str	r4, [r0, r3]
 8000dc2:	3304      	adds	r3, #4

08000dc4 <LoopCopyDataInit>:
 8000dc4:	18c4      	adds	r4, r0, r3
 8000dc6:	428c      	cmp	r4, r1
 8000dc8:	d3f9      	bcc.n	8000dbe <CopyDataInit>
 8000dca:	4a0a      	ldr	r2, [pc, #40]	@ (8000df4 <LoopForever+0x12>)
 8000dcc:	4c0a      	ldr	r4, [pc, #40]	@ (8000df8 <LoopForever+0x16>)
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e001      	b.n	8000dd6 <LoopFillZerobss>

08000dd2 <FillZerobss>:
 8000dd2:	6013      	str	r3, [r2, #0]
 8000dd4:	3204      	adds	r2, #4

08000dd6 <LoopFillZerobss>:
 8000dd6:	42a2      	cmp	r2, r4
 8000dd8:	d3fb      	bcc.n	8000dd2 <FillZerobss>
 8000dda:	f001 f817 	bl	8001e0c <__libc_init_array>
 8000dde:	f7ff fe53 	bl	8000a88 <main>

08000de2 <LoopForever>:
 8000de2:	e7fe      	b.n	8000de2 <LoopForever>
 8000de4:	20020000 	.word	0x20020000
 8000de8:	20000000 	.word	0x20000000
 8000dec:	20000070 	.word	0x20000070
 8000df0:	0800236c 	.word	0x0800236c
 8000df4:	20000070 	.word	0x20000070
 8000df8:	2000021c 	.word	0x2000021c

08000dfc <ADC_IRQHandler>:
 8000dfc:	e7fe      	b.n	8000dfc <ADC_IRQHandler>
	...

08000e00 <GPIO_PeriClockControl>:
 *
 * @return            -  none
 *
 * @Note              -  none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	460b      	mov	r3, r1
 8000e0a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000e0c:	78fb      	ldrb	r3, [r7, #3]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d157      	bne.n	8000ec2 <GPIO_PeriClockControl+0xc2>
		if(pGPIOx == GPIOA){
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a59      	ldr	r2, [pc, #356]	@ (8000f7c <GPIO_PeriClockControl+0x17c>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d106      	bne.n	8000e28 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 8000e1a:	4b59      	ldr	r3, [pc, #356]	@ (8000f80 <GPIO_PeriClockControl+0x180>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1e:	4a58      	ldr	r2, [pc, #352]	@ (8000f80 <GPIO_PeriClockControl+0x180>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	6313      	str	r3, [r2, #48]	@ 0x30
		}
		else if(pGPIOx == GPIOH){
			GPIOH_PCLK_DI();
		}
	}
}
 8000e26:	e0a3      	b.n	8000f70 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB){
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4a56      	ldr	r2, [pc, #344]	@ (8000f84 <GPIO_PeriClockControl+0x184>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d106      	bne.n	8000e3e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000e30:	4b53      	ldr	r3, [pc, #332]	@ (8000f80 <GPIO_PeriClockControl+0x180>)
 8000e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e34:	4a52      	ldr	r2, [pc, #328]	@ (8000f80 <GPIO_PeriClockControl+0x180>)
 8000e36:	f043 0302 	orr.w	r3, r3, #2
 8000e3a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000e3c:	e098      	b.n	8000f70 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC){
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a51      	ldr	r2, [pc, #324]	@ (8000f88 <GPIO_PeriClockControl+0x188>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d106      	bne.n	8000e54 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000e46:	4b4e      	ldr	r3, [pc, #312]	@ (8000f80 <GPIO_PeriClockControl+0x180>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4a:	4a4d      	ldr	r2, [pc, #308]	@ (8000f80 <GPIO_PeriClockControl+0x180>)
 8000e4c:	f043 0304 	orr.w	r3, r3, #4
 8000e50:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000e52:	e08d      	b.n	8000f70 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD){
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a4d      	ldr	r2, [pc, #308]	@ (8000f8c <GPIO_PeriClockControl+0x18c>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d106      	bne.n	8000e6a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000e5c:	4b48      	ldr	r3, [pc, #288]	@ (8000f80 <GPIO_PeriClockControl+0x180>)
 8000e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e60:	4a47      	ldr	r2, [pc, #284]	@ (8000f80 <GPIO_PeriClockControl+0x180>)
 8000e62:	f043 0308 	orr.w	r3, r3, #8
 8000e66:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000e68:	e082      	b.n	8000f70 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOE){
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a48      	ldr	r2, [pc, #288]	@ (8000f90 <GPIO_PeriClockControl+0x190>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d106      	bne.n	8000e80 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000e72:	4b43      	ldr	r3, [pc, #268]	@ (8000f80 <GPIO_PeriClockControl+0x180>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e76:	4a42      	ldr	r2, [pc, #264]	@ (8000f80 <GPIO_PeriClockControl+0x180>)
 8000e78:	f043 0310 	orr.w	r3, r3, #16
 8000e7c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000e7e:	e077      	b.n	8000f70 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF){
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4a44      	ldr	r2, [pc, #272]	@ (8000f94 <GPIO_PeriClockControl+0x194>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d106      	bne.n	8000e96 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000e88:	4b3d      	ldr	r3, [pc, #244]	@ (8000f80 <GPIO_PeriClockControl+0x180>)
 8000e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8c:	4a3c      	ldr	r2, [pc, #240]	@ (8000f80 <GPIO_PeriClockControl+0x180>)
 8000e8e:	f043 0320 	orr.w	r3, r3, #32
 8000e92:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000e94:	e06c      	b.n	8000f70 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG){
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a3f      	ldr	r2, [pc, #252]	@ (8000f98 <GPIO_PeriClockControl+0x198>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d106      	bne.n	8000eac <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000e9e:	4b38      	ldr	r3, [pc, #224]	@ (8000f80 <GPIO_PeriClockControl+0x180>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea2:	4a37      	ldr	r2, [pc, #220]	@ (8000f80 <GPIO_PeriClockControl+0x180>)
 8000ea4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ea8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000eaa:	e061      	b.n	8000f70 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH){
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4a3b      	ldr	r2, [pc, #236]	@ (8000f9c <GPIO_PeriClockControl+0x19c>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d15d      	bne.n	8000f70 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 8000eb4:	4b32      	ldr	r3, [pc, #200]	@ (8000f80 <GPIO_PeriClockControl+0x180>)
 8000eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb8:	4a31      	ldr	r2, [pc, #196]	@ (8000f80 <GPIO_PeriClockControl+0x180>)
 8000eba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ebe:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000ec0:	e056      	b.n	8000f70 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA){
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a2d      	ldr	r2, [pc, #180]	@ (8000f7c <GPIO_PeriClockControl+0x17c>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d106      	bne.n	8000ed8 <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 8000eca:	4b2d      	ldr	r3, [pc, #180]	@ (8000f80 <GPIO_PeriClockControl+0x180>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ece:	4a2c      	ldr	r2, [pc, #176]	@ (8000f80 <GPIO_PeriClockControl+0x180>)
 8000ed0:	f023 0301 	bic.w	r3, r3, #1
 8000ed4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000ed6:	e04b      	b.n	8000f70 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB){
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a2a      	ldr	r2, [pc, #168]	@ (8000f84 <GPIO_PeriClockControl+0x184>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d106      	bne.n	8000eee <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 8000ee0:	4b27      	ldr	r3, [pc, #156]	@ (8000f80 <GPIO_PeriClockControl+0x180>)
 8000ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee4:	4a26      	ldr	r2, [pc, #152]	@ (8000f80 <GPIO_PeriClockControl+0x180>)
 8000ee6:	f023 0302 	bic.w	r3, r3, #2
 8000eea:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000eec:	e040      	b.n	8000f70 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC){
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a25      	ldr	r2, [pc, #148]	@ (8000f88 <GPIO_PeriClockControl+0x188>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d106      	bne.n	8000f04 <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 8000ef6:	4b22      	ldr	r3, [pc, #136]	@ (8000f80 <GPIO_PeriClockControl+0x180>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efa:	4a21      	ldr	r2, [pc, #132]	@ (8000f80 <GPIO_PeriClockControl+0x180>)
 8000efc:	f023 0304 	bic.w	r3, r3, #4
 8000f00:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000f02:	e035      	b.n	8000f70 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD){
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4a21      	ldr	r2, [pc, #132]	@ (8000f8c <GPIO_PeriClockControl+0x18c>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d106      	bne.n	8000f1a <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 8000f0c:	4b1c      	ldr	r3, [pc, #112]	@ (8000f80 <GPIO_PeriClockControl+0x180>)
 8000f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f10:	4a1b      	ldr	r2, [pc, #108]	@ (8000f80 <GPIO_PeriClockControl+0x180>)
 8000f12:	f023 0308 	bic.w	r3, r3, #8
 8000f16:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000f18:	e02a      	b.n	8000f70 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOE){
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a1c      	ldr	r2, [pc, #112]	@ (8000f90 <GPIO_PeriClockControl+0x190>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d106      	bne.n	8000f30 <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 8000f22:	4b17      	ldr	r3, [pc, #92]	@ (8000f80 <GPIO_PeriClockControl+0x180>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f26:	4a16      	ldr	r2, [pc, #88]	@ (8000f80 <GPIO_PeriClockControl+0x180>)
 8000f28:	f023 0310 	bic.w	r3, r3, #16
 8000f2c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000f2e:	e01f      	b.n	8000f70 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF){
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4a18      	ldr	r2, [pc, #96]	@ (8000f94 <GPIO_PeriClockControl+0x194>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d106      	bne.n	8000f46 <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 8000f38:	4b11      	ldr	r3, [pc, #68]	@ (8000f80 <GPIO_PeriClockControl+0x180>)
 8000f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3c:	4a10      	ldr	r2, [pc, #64]	@ (8000f80 <GPIO_PeriClockControl+0x180>)
 8000f3e:	f023 0320 	bic.w	r3, r3, #32
 8000f42:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000f44:	e014      	b.n	8000f70 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG){
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a13      	ldr	r2, [pc, #76]	@ (8000f98 <GPIO_PeriClockControl+0x198>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d106      	bne.n	8000f5c <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 8000f4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f80 <GPIO_PeriClockControl+0x180>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f52:	4a0b      	ldr	r2, [pc, #44]	@ (8000f80 <GPIO_PeriClockControl+0x180>)
 8000f54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000f58:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000f5a:	e009      	b.n	8000f70 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH){
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4a0f      	ldr	r2, [pc, #60]	@ (8000f9c <GPIO_PeriClockControl+0x19c>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d105      	bne.n	8000f70 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 8000f64:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <GPIO_PeriClockControl+0x180>)
 8000f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f68:	4a05      	ldr	r2, [pc, #20]	@ (8000f80 <GPIO_PeriClockControl+0x180>)
 8000f6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000f6e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bc80      	pop	{r7}
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	40020000 	.word	0x40020000
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40020400 	.word	0x40020400
 8000f88:	40020800 	.word	0x40020800
 8000f8c:	40020c00 	.word	0x40020c00
 8000f90:	40021000 	.word	0x40021000
 8000f94:	40021400 	.word	0x40021400
 8000f98:	40021800 	.word	0x40021800
 8000f9c:	40021c00 	.word	0x40021c00

08000fa0 <GPIO_Init>:
 *
 * @return            -  none
 *
 * @Note              -  none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]

	uint32_t temp=0; //temp. register
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]

	//enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff ff24 	bl	8000e00 <GPIO_PeriClockControl>

	//1 . configure the mode of GPIO pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	795b      	ldrb	r3, [r3, #5]
 8000fbc:	2b03      	cmp	r3, #3
 8000fbe:	d820      	bhi.n	8001002 <GPIO_Init+0x62>

		//the none interrupt mode
		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	795b      	ldrb	r3, [r3, #5]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	791b      	ldrb	r3, [r3, #4]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	791b      	ldrb	r3, [r3, #4]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	2103      	movs	r1, #3
 8000fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	400a      	ands	r2, r1
 8000fee:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	6819      	ldr	r1, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	697a      	ldr	r2, [r7, #20]
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	e0cb      	b.n	800119a <GPIO_Init+0x1fa>

	}else{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	795b      	ldrb	r3, [r3, #5]
 8001006:	2b04      	cmp	r3, #4
 8001008:	d117      	bne.n	800103a <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800100a:	4b4b      	ldr	r3, [pc, #300]	@ (8001138 <GPIO_Init+0x198>)
 800100c:	68db      	ldr	r3, [r3, #12]
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	7912      	ldrb	r2, [r2, #4]
 8001012:	4611      	mov	r1, r2
 8001014:	2201      	movs	r2, #1
 8001016:	408a      	lsls	r2, r1
 8001018:	4611      	mov	r1, r2
 800101a:	4a47      	ldr	r2, [pc, #284]	@ (8001138 <GPIO_Init+0x198>)
 800101c:	430b      	orrs	r3, r1
 800101e:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001020:	4b45      	ldr	r3, [pc, #276]	@ (8001138 <GPIO_Init+0x198>)
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	7912      	ldrb	r2, [r2, #4]
 8001028:	4611      	mov	r1, r2
 800102a:	2201      	movs	r2, #1
 800102c:	408a      	lsls	r2, r1
 800102e:	43d2      	mvns	r2, r2
 8001030:	4611      	mov	r1, r2
 8001032:	4a41      	ldr	r2, [pc, #260]	@ (8001138 <GPIO_Init+0x198>)
 8001034:	400b      	ands	r3, r1
 8001036:	6093      	str	r3, [r2, #8]
 8001038:	e035      	b.n	80010a6 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	795b      	ldrb	r3, [r3, #5]
 800103e:	2b05      	cmp	r3, #5
 8001040:	d117      	bne.n	8001072 <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001042:	4b3d      	ldr	r3, [pc, #244]	@ (8001138 <GPIO_Init+0x198>)
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	7912      	ldrb	r2, [r2, #4]
 800104a:	4611      	mov	r1, r2
 800104c:	2201      	movs	r2, #1
 800104e:	408a      	lsls	r2, r1
 8001050:	4611      	mov	r1, r2
 8001052:	4a39      	ldr	r2, [pc, #228]	@ (8001138 <GPIO_Init+0x198>)
 8001054:	430b      	orrs	r3, r1
 8001056:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001058:	4b37      	ldr	r3, [pc, #220]	@ (8001138 <GPIO_Init+0x198>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	7912      	ldrb	r2, [r2, #4]
 8001060:	4611      	mov	r1, r2
 8001062:	2201      	movs	r2, #1
 8001064:	408a      	lsls	r2, r1
 8001066:	43d2      	mvns	r2, r2
 8001068:	4611      	mov	r1, r2
 800106a:	4a33      	ldr	r2, [pc, #204]	@ (8001138 <GPIO_Init+0x198>)
 800106c:	400b      	ands	r3, r1
 800106e:	60d3      	str	r3, [r2, #12]
 8001070:	e019      	b.n	80010a6 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	795b      	ldrb	r3, [r3, #5]
 8001076:	2b06      	cmp	r3, #6
 8001078:	d115      	bne.n	80010a6 <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800107a:	4b2f      	ldr	r3, [pc, #188]	@ (8001138 <GPIO_Init+0x198>)
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	7912      	ldrb	r2, [r2, #4]
 8001082:	4611      	mov	r1, r2
 8001084:	2201      	movs	r2, #1
 8001086:	408a      	lsls	r2, r1
 8001088:	4611      	mov	r1, r2
 800108a:	4a2b      	ldr	r2, [pc, #172]	@ (8001138 <GPIO_Init+0x198>)
 800108c:	430b      	orrs	r3, r1
 800108e:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001090:	4b29      	ldr	r3, [pc, #164]	@ (8001138 <GPIO_Init+0x198>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	7912      	ldrb	r2, [r2, #4]
 8001098:	4611      	mov	r1, r2
 800109a:	2201      	movs	r2, #1
 800109c:	408a      	lsls	r2, r1
 800109e:	4611      	mov	r1, r2
 80010a0:	4a25      	ldr	r2, [pc, #148]	@ (8001138 <GPIO_Init+0x198>)
 80010a2:	430b      	orrs	r3, r1
 80010a4:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	791b      	ldrb	r3, [r3, #4]
 80010aa:	089b      	lsrs	r3, r3, #2
 80010ac:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	791b      	ldrb	r3, [r3, #4]
 80010b2:	f003 0303 	and.w	r3, r3, #3
 80010b6:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a1f      	ldr	r2, [pc, #124]	@ (800113c <GPIO_Init+0x19c>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d04e      	beq.n	8001160 <GPIO_Init+0x1c0>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a1e      	ldr	r2, [pc, #120]	@ (8001140 <GPIO_Init+0x1a0>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d032      	beq.n	8001132 <GPIO_Init+0x192>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a1c      	ldr	r2, [pc, #112]	@ (8001144 <GPIO_Init+0x1a4>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d02b      	beq.n	800112e <GPIO_Init+0x18e>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a1b      	ldr	r2, [pc, #108]	@ (8001148 <GPIO_Init+0x1a8>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d024      	beq.n	800112a <GPIO_Init+0x18a>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a19      	ldr	r2, [pc, #100]	@ (800114c <GPIO_Init+0x1ac>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d01d      	beq.n	8001126 <GPIO_Init+0x186>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a18      	ldr	r2, [pc, #96]	@ (8001150 <GPIO_Init+0x1b0>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d016      	beq.n	8001122 <GPIO_Init+0x182>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a16      	ldr	r2, [pc, #88]	@ (8001154 <GPIO_Init+0x1b4>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d00f      	beq.n	800111e <GPIO_Init+0x17e>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a15      	ldr	r2, [pc, #84]	@ (8001158 <GPIO_Init+0x1b8>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d008      	beq.n	800111a <GPIO_Init+0x17a>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a13      	ldr	r2, [pc, #76]	@ (800115c <GPIO_Init+0x1bc>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d101      	bne.n	8001116 <GPIO_Init+0x176>
 8001112:	2308      	movs	r3, #8
 8001114:	e025      	b.n	8001162 <GPIO_Init+0x1c2>
 8001116:	2300      	movs	r3, #0
 8001118:	e023      	b.n	8001162 <GPIO_Init+0x1c2>
 800111a:	2307      	movs	r3, #7
 800111c:	e021      	b.n	8001162 <GPIO_Init+0x1c2>
 800111e:	2306      	movs	r3, #6
 8001120:	e01f      	b.n	8001162 <GPIO_Init+0x1c2>
 8001122:	2305      	movs	r3, #5
 8001124:	e01d      	b.n	8001162 <GPIO_Init+0x1c2>
 8001126:	2304      	movs	r3, #4
 8001128:	e01b      	b.n	8001162 <GPIO_Init+0x1c2>
 800112a:	2303      	movs	r3, #3
 800112c:	e019      	b.n	8001162 <GPIO_Init+0x1c2>
 800112e:	2302      	movs	r3, #2
 8001130:	e017      	b.n	8001162 <GPIO_Init+0x1c2>
 8001132:	2301      	movs	r3, #1
 8001134:	e015      	b.n	8001162 <GPIO_Init+0x1c2>
 8001136:	bf00      	nop
 8001138:	40013c00 	.word	0x40013c00
 800113c:	40020000 	.word	0x40020000
 8001140:	40020400 	.word	0x40020400
 8001144:	40020800 	.word	0x40020800
 8001148:	40020c00 	.word	0x40020c00
 800114c:	40021000 	.word	0x40021000
 8001150:	40021400 	.word	0x40021400
 8001154:	40021800 	.word	0x40021800
 8001158:	40021c00 	.word	0x40021c00
 800115c:	40022000 	.word	0x40022000
 8001160:	2300      	movs	r3, #0
 8001162:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8001164:	4b59      	ldr	r3, [pc, #356]	@ (80012cc <GPIO_Init+0x32c>)
 8001166:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001168:	4a58      	ldr	r2, [pc, #352]	@ (80012cc <GPIO_Init+0x32c>)
 800116a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800116e:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8001170:	7c7a      	ldrb	r2, [r7, #17]
 8001172:	7cbb      	ldrb	r3, [r7, #18]
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	fa02 f103 	lsl.w	r1, r2, r3
 800117a:	4a55      	ldr	r2, [pc, #340]	@ (80012d0 <GPIO_Init+0x330>)
 800117c:	7cfb      	ldrb	r3, [r7, #19]
 800117e:	3302      	adds	r3, #2
 8001180:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8001184:	4b53      	ldr	r3, [pc, #332]	@ (80012d4 <GPIO_Init+0x334>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	7912      	ldrb	r2, [r2, #4]
 800118c:	4611      	mov	r1, r2
 800118e:	2201      	movs	r2, #1
 8001190:	408a      	lsls	r2, r1
 8001192:	4611      	mov	r1, r2
 8001194:	4a4f      	ldr	r2, [pc, #316]	@ (80012d4 <GPIO_Init+0x334>)
 8001196:	430b      	orrs	r3, r1
 8001198:	6013      	str	r3, [r2, #0]
	}

	//2. Configure the speed
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	799b      	ldrb	r3, [r3, #6]
 800119e:	461a      	mov	r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	791b      	ldrb	r3, [r3, #4]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	689a      	ldr	r2, [r3, #8]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	791b      	ldrb	r3, [r3, #4]
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	2103      	movs	r1, #3
 80011ba:	fa01 f303 	lsl.w	r3, r1, r3
 80011be:	43db      	mvns	r3, r3
 80011c0:	4619      	mov	r1, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	400a      	ands	r2, r1
 80011c8:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	6899      	ldr	r1, [r3, #8]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	697a      	ldr	r2, [r7, #20]
 80011d6:	430a      	orrs	r2, r1
 80011d8:	609a      	str	r2, [r3, #8]

	//3. Configure the pull-up pull-down setting
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	79db      	ldrb	r3, [r3, #7]
 80011de:	461a      	mov	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	791b      	ldrb	r3, [r3, #4]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	68da      	ldr	r2, [r3, #12]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	791b      	ldrb	r3, [r3, #4]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	2103      	movs	r1, #3
 80011fa:	fa01 f303 	lsl.w	r3, r1, r3
 80011fe:	43db      	mvns	r3, r3
 8001200:	4619      	mov	r1, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	400a      	ands	r2, r1
 8001208:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	68d9      	ldr	r1, [r3, #12]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	697a      	ldr	r2, [r7, #20]
 8001216:	430a      	orrs	r2, r1
 8001218:	60da      	str	r2, [r3, #12]

	//4. Configure the output type
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	7a1b      	ldrb	r3, [r3, #8]
 800121e:	461a      	mov	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	791b      	ldrb	r3, [r3, #4]
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	685a      	ldr	r2, [r3, #4]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	791b      	ldrb	r3, [r3, #4]
 8001234:	4619      	mov	r1, r3
 8001236:	2301      	movs	r3, #1
 8001238:	408b      	lsls	r3, r1
 800123a:	43db      	mvns	r3, r3
 800123c:	4619      	mov	r1, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	400a      	ands	r2, r1
 8001244:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	6859      	ldr	r1, [r3, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	697a      	ldr	r2, [r7, #20]
 8001252:	430a      	orrs	r2, r1
 8001254:	605a      	str	r2, [r3, #4]

	//5. Configure the alternate functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	795b      	ldrb	r3, [r3, #5]
 800125a:	2b02      	cmp	r3, #2
 800125c:	d131      	bne.n	80012c2 <GPIO_Init+0x322>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	791b      	ldrb	r3, [r3, #4]
 8001262:	08db      	lsrs	r3, r3, #3
 8001264:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	791b      	ldrb	r3, [r3, #4]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	7c3a      	ldrb	r2, [r7, #16]
 8001276:	3208      	adds	r2, #8
 8001278:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800127c:	7bfb      	ldrb	r3, [r7, #15]
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	220f      	movs	r2, #15
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43db      	mvns	r3, r3
 8001288:	4618      	mov	r0, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	7c3a      	ldrb	r2, [r7, #16]
 8001290:	4001      	ands	r1, r0
 8001292:	3208      	adds	r2, #8
 8001294:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2 ));
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	7c3a      	ldrb	r2, [r7, #16]
 800129e:	3208      	adds	r2, #8
 80012a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	7a5b      	ldrb	r3, [r3, #9]
 80012a8:	461a      	mov	r2, r3
 80012aa:	7bfb      	ldrb	r3, [r7, #15]
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	4618      	mov	r0, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	7c3a      	ldrb	r2, [r7, #16]
 80012ba:	4301      	orrs	r1, r0
 80012bc:	3208      	adds	r2, #8
 80012be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80012c2:	bf00      	nop
 80012c4:	3718      	adds	r7, #24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40013800 	.word	0x40013800
 80012d4:	40013c00 	.word	0x40013c00

080012d8 <GPIO_WriteToOutputPin>:
 *
 * @return            -  none
 *
 * @Note              -  none
 */
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value){
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	460b      	mov	r3, r1
 80012e2:	70fb      	strb	r3, [r7, #3]
 80012e4:	4613      	mov	r3, r2
 80012e6:	70bb      	strb	r3, [r7, #2]
	if(Value == GPIO_PIN_SET)
 80012e8:	78bb      	ldrb	r3, [r7, #2]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d109      	bne.n	8001302 <GPIO_WriteToOutputPin+0x2a>
	{
		//write 1 to the output data register at the bit field corresponding to the pin number
		pGPIOx->ODR |= ( 1 << PinNumber);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	78fa      	ldrb	r2, [r7, #3]
 80012f4:	2101      	movs	r1, #1
 80012f6:	fa01 f202 	lsl.w	r2, r1, r2
 80012fa:	431a      	orrs	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	615a      	str	r2, [r3, #20]
	}else
	{
		//write 0
		pGPIOx->ODR &= ~( 1 << PinNumber);
	}
}
 8001300:	e009      	b.n	8001316 <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~( 1 << PinNumber);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	78fa      	ldrb	r2, [r7, #3]
 8001308:	2101      	movs	r1, #1
 800130a:	fa01 f202 	lsl.w	r2, r1, r2
 800130e:	43d2      	mvns	r2, r2
 8001310:	401a      	ands	r2, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	615a      	str	r2, [r3, #20]
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr

08001320 <I2C_GenerateStartCondition>:

static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle);
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle);

void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_START);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	601a      	str	r2, [r3, #0]
}
 8001334:	bf00      	nop
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	bc80      	pop	{r7}
 800133c:	4770      	bx	lr

0800133e <I2C_GenerateStopCondition>:

void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx){
 800133e:	b480      	push	{r7}
 8001340:	b083      	sub	sp, #12
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	601a      	str	r2, [r3, #0]
}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr

0800135c <I2C_ExecuteAddressPhaseWrite>:


static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	460b      	mov	r3, r1
 8001366:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8001368:	78fb      	ldrb	r3, [r7, #3]
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); //SlaveAddr is Slave address + r/nw bit=0
 800136e:	78fb      	ldrb	r3, [r7, #3]
 8001370:	f023 0301 	bic.w	r3, r3, #1
 8001374:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8001376:	78fa      	ldrb	r2, [r7, #3]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	611a      	str	r2, [r3, #16]
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	bc80      	pop	{r7}
 8001384:	4770      	bx	lr

08001386 <I2C_ExecuteAddressPhaseRead>:

static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8001386:	b480      	push	{r7}
 8001388:	b083      	sub	sp, #12
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
 800138e:	460b      	mov	r3, r1
 8001390:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8001392:	78fb      	ldrb	r3, [r7, #3]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1; //SlaveAddr is Slave address + r/nw bit=1
 8001398:	78fb      	ldrb	r3, [r7, #3]
 800139a:	f043 0301 	orr.w	r3, r3, #1
 800139e:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 80013a0:	78fa      	ldrb	r2, [r7, #3]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	611a      	str	r2, [r3, #16]
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr

080013b0 <I2C_ClearADDRFlag>:

static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d01f      	beq.n	8001406 <I2C_ClearADDRFlag+0x56>
	{
		//Device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	7f1b      	ldrb	r3, [r3, #28]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d112      	bne.n	80013f4 <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize == 1)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a1b      	ldr	r3, [r3, #32]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d105      	bne.n	80013e2 <I2C_ClearADDRFlag+0x32>
			{
				//1. Disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2100      	movs	r1, #0
 80013dc:	4618      	mov	r0, r3
 80013de:	f000 f959 	bl	8001694 <I2C_ManageAcking>
			}
			//2. Clear the ADDR flag
			dummy_read = pI2CHandle->pI2Cx->SR1;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	695b      	ldr	r3, [r3, #20]
 80013e8:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	60fb      	str	r3, [r7, #12]
		//2. Clear the ADDR flag
		dummy_read = pI2CHandle->pI2Cx->SR1;
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}
}
 80013f2:	e010      	b.n	8001416 <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	60fb      	str	r3, [r7, #12]
}
 8001404:	e007      	b.n	8001416 <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	695b      	ldr	r3, [r3, #20]
 800140c:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	60fb      	str	r3, [r7, #12]
}
 8001416:	bf00      	nop
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
	...

08001420 <I2C_PeriClockControl>:
 *
 * @return            -  none
 *
 * @Note              -  none
 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	460b      	mov	r3, r1
 800142a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 800142c:	78fb      	ldrb	r3, [r7, #3]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d120      	bne.n	8001474 <I2C_PeriClockControl+0x54>
		if(pI2Cx == I2C1){
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a22      	ldr	r2, [pc, #136]	@ (80014c0 <I2C_PeriClockControl+0xa0>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d106      	bne.n	8001448 <I2C_PeriClockControl+0x28>
			I2C1_PCLK_EN();
 800143a:	4b22      	ldr	r3, [pc, #136]	@ (80014c4 <I2C_PeriClockControl+0xa4>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143e:	4a21      	ldr	r2, [pc, #132]	@ (80014c4 <I2C_PeriClockControl+0xa4>)
 8001440:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001444:	6413      	str	r3, [r2, #64]	@ 0x40
		}
		else if(pI2Cx == I2C3){
			I2C3_PCLK_DI();
		}
	}
}
 8001446:	e035      	b.n	80014b4 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C2){
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4a1f      	ldr	r2, [pc, #124]	@ (80014c8 <I2C_PeriClockControl+0xa8>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d106      	bne.n	800145e <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8001450:	4b1c      	ldr	r3, [pc, #112]	@ (80014c4 <I2C_PeriClockControl+0xa4>)
 8001452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001454:	4a1b      	ldr	r2, [pc, #108]	@ (80014c4 <I2C_PeriClockControl+0xa4>)
 8001456:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800145a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800145c:	e02a      	b.n	80014b4 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C3){
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a1a      	ldr	r2, [pc, #104]	@ (80014cc <I2C_PeriClockControl+0xac>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d126      	bne.n	80014b4 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 8001466:	4b17      	ldr	r3, [pc, #92]	@ (80014c4 <I2C_PeriClockControl+0xa4>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146a:	4a16      	ldr	r2, [pc, #88]	@ (80014c4 <I2C_PeriClockControl+0xa4>)
 800146c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001470:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001472:	e01f      	b.n	80014b4 <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1){
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4a12      	ldr	r2, [pc, #72]	@ (80014c0 <I2C_PeriClockControl+0xa0>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d106      	bne.n	800148a <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DI();
 800147c:	4b11      	ldr	r3, [pc, #68]	@ (80014c4 <I2C_PeriClockControl+0xa4>)
 800147e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001480:	4a10      	ldr	r2, [pc, #64]	@ (80014c4 <I2C_PeriClockControl+0xa4>)
 8001482:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001486:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001488:	e014      	b.n	80014b4 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C2){
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a0e      	ldr	r2, [pc, #56]	@ (80014c8 <I2C_PeriClockControl+0xa8>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d106      	bne.n	80014a0 <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DI();
 8001492:	4b0c      	ldr	r3, [pc, #48]	@ (80014c4 <I2C_PeriClockControl+0xa4>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001496:	4a0b      	ldr	r2, [pc, #44]	@ (80014c4 <I2C_PeriClockControl+0xa4>)
 8001498:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800149c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800149e:	e009      	b.n	80014b4 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C3){
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4a0a      	ldr	r2, [pc, #40]	@ (80014cc <I2C_PeriClockControl+0xac>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d105      	bne.n	80014b4 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DI();
 80014a8:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <I2C_PeriClockControl+0xa4>)
 80014aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ac:	4a05      	ldr	r2, [pc, #20]	@ (80014c4 <I2C_PeriClockControl+0xa4>)
 80014ae:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80014b2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bc80      	pop	{r7}
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	40005400 	.word	0x40005400
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40005800 	.word	0x40005800
 80014cc:	40005c00 	.word	0x40005c00

080014d0 <I2C_Init>:
 *
 * @return            -  none
 *
 * @Note              -  none
 */
void I2C_Init(I2C_Handle_t *pI2CHandle){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]

	uint32_t tempreg = 0;
 80014d8:	2300      	movs	r3, #0
 80014da:	60fb      	str	r3, [r7, #12]

	//enable the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2101      	movs	r1, #1
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff ff9c 	bl	8001420 <I2C_PeriClockControl>

	//ACK bit control
	tempreg |= (pI2CHandle->I2C_Config.I2C_ACKControl << 10);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	7a5b      	ldrb	r3, [r3, #9]
 80014ec:	029b      	lsls	r3, r3, #10
 80014ee:	68fa      	ldr	r2, [r7, #12]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	68fa      	ldr	r2, [r7, #12]
 80014fa:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2
	tempreg = 0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() / 1000000U;
 8001500:	f000 f9e0 	bl	80018c4 <RCC_GetPCLK1Value>
 8001504:	4603      	mov	r3, r0
 8001506:	4a49      	ldr	r2, [pc, #292]	@ (800162c <I2C_Init+0x15c>)
 8001508:	fba2 2303 	umull	r2, r3, r2, r3
 800150c:	0c9b      	lsrs	r3, r3, #18
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	4313      	orrs	r3, r2
 8001512:	60fb      	str	r3, [r7, #12]
	//pI2CHandle->pI2Cx->CR2 = tempreg | (pI2CHandle->pI2Cx->CR2 & (~(0x3f)));
	pI2CHandle->pI2Cx->CR2 =tempreg & 0x3F;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	68fa      	ldr	r2, [r7, #12]
 800151a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800151e:	605a      	str	r2, [r3, #4]

	//program the device  own address
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	7a1b      	ldrb	r3, [r3, #8]
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	68fa      	ldr	r2, [r7, #12]
 8001528:	4313      	orrs	r3, r2
 800152a:	60fb      	str	r3, [r7, #12]
	tempreg |= (1 << 14);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001532:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	68fa      	ldr	r2, [r7, #12]
 800153a:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	60fb      	str	r3, [r7, #12]

	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	4a39      	ldr	r2, [pc, #228]	@ (8001630 <I2C_Init+0x160>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d80f      	bhi.n	800156e <I2C_Init+0x9e>
		//mode is standard mode
		ccr_value = RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 800154e:	f000 f9b9 	bl	80018c4 <RCC_GetPCLK1Value>
 8001552:	4602      	mov	r2, r0
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	fbb2 f3f3 	udiv	r3, r2, r3
 800155e:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xfff);
 8001560:	897b      	ldrh	r3, [r7, #10]
 8001562:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	4313      	orrs	r3, r2
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	e032      	b.n	80015d4 <I2C_Init+0x104>
	}else{
		//mode is fast mode
		tempreg |= (1 << 15);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001574:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	895b      	ldrh	r3, [r3, #10]
 800157a:	039b      	lsls	r3, r3, #14
 800157c:	68fa      	ldr	r2, [r7, #12]
 800157e:	4313      	orrs	r3, r2
 8001580:	60fb      	str	r3, [r7, #12]

		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2){
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	895b      	ldrh	r3, [r3, #10]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d10e      	bne.n	80015a8 <I2C_Init+0xd8>
			ccr_value |= RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 800158a:	f000 f99b 	bl	80018c4 <RCC_GetPCLK1Value>
 800158e:	4601      	mov	r1, r0
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685a      	ldr	r2, [r3, #4]
 8001594:	4613      	mov	r3, r2
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	4413      	add	r3, r2
 800159a:	fbb1 f3f3 	udiv	r3, r1, r3
 800159e:	b29a      	uxth	r2, r3
 80015a0:	897b      	ldrh	r3, [r7, #10]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	817b      	strh	r3, [r7, #10]
 80015a6:	e00f      	b.n	80015c8 <I2C_Init+0xf8>
		}else{
			ccr_value |= RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 80015a8:	f000 f98c 	bl	80018c4 <RCC_GetPCLK1Value>
 80015ac:	4601      	mov	r1, r0
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685a      	ldr	r2, [r3, #4]
 80015b2:	4613      	mov	r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	4413      	add	r3, r2
 80015b8:	009a      	lsls	r2, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	897b      	ldrh	r3, [r7, #10]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xfff);
 80015c8:	897b      	ldrh	r3, [r7, #10]
 80015ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	68fa      	ldr	r2, [r7, #12]
 80015da:	61da      	str	r2, [r3, #28]

	//TRISE configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	4a13      	ldr	r2, [pc, #76]	@ (8001630 <I2C_Init+0x160>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d809      	bhi.n	80015fa <I2C_Init+0x12a>
		//mode is standard mode
		tempreg = (RCC_GetPCLK1Value() / 1000000U) + 1;
 80015e6:	f000 f96d 	bl	80018c4 <RCC_GetPCLK1Value>
 80015ea:	4603      	mov	r3, r0
 80015ec:	4a0f      	ldr	r2, [pc, #60]	@ (800162c <I2C_Init+0x15c>)
 80015ee:	fba2 2303 	umull	r2, r3, r2, r3
 80015f2:	0c9b      	lsrs	r3, r3, #18
 80015f4:	3301      	adds	r3, #1
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	e00d      	b.n	8001616 <I2C_Init+0x146>

	}else{
		//Fast mode
		tempreg = ((RCC_GetPCLK1Value() * 300) / 1000000000U) + 1;
 80015fa:	f000 f963 	bl	80018c4 <RCC_GetPCLK1Value>
 80015fe:	4603      	mov	r3, r0
 8001600:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001604:	fb02 f303 	mul.w	r3, r2, r3
 8001608:	0a5b      	lsrs	r3, r3, #9
 800160a:	4a0a      	ldr	r2, [pc, #40]	@ (8001634 <I2C_Init+0x164>)
 800160c:	fba2 2303 	umull	r2, r3, r2, r3
 8001610:	09db      	lsrs	r3, r3, #7
 8001612:	3301      	adds	r3, #1
 8001614:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3f);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8001620:	621a      	str	r2, [r3, #32]
}
 8001622:	bf00      	nop
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	431bde83 	.word	0x431bde83
 8001630:	000186a0 	.word	0x000186a0
 8001634:	00044b83 	.word	0x00044b83

08001638 <I2C_PeripheralControl>:
 *
 * @return            -  none
 *
 * @Note              -  none
 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	460b      	mov	r3, r1
 8001642:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8001644:	78fb      	ldrb	r3, [r7, #3]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d106      	bne.n	8001658 <I2C_PeripheralControl+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f043 0201 	orr.w	r2, r3, #1
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	601a      	str	r2, [r3, #0]
	}else{
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}
}
 8001656:	e005      	b.n	8001664 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f023 0201 	bic.w	r2, r3, #1
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	601a      	str	r2, [r3, #0]
}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	bc80      	pop	{r7}
 800166c:	4770      	bx	lr

0800166e <I2C_GetFlagStatus>:
 * @return            -  none
 *
 * @Note              -  none
 */
uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx , uint32_t FlagName)
{
 800166e:	b480      	push	{r7}
 8001670:	b083      	sub	sp, #12
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
 8001676:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	695a      	ldr	r2, [r3, #20]
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	4013      	ands	r3, r2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <I2C_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8001684:	2301      	movs	r3, #1
 8001686:	e000      	b.n	800168a <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr

08001694 <I2C_ManageAcking>:
 *
 * @return            -  none
 *
 * @Note              -  none
 */
void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	460b      	mov	r3, r1
 800169e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE){
 80016a0:	78fb      	ldrb	r3, [r7, #3]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d106      	bne.n	80016b4 <I2C_ManageAcking+0x20>
		//enable the ack
		pI2Cx->CR1 |= 1 << I2C_CR1_ACK;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	601a      	str	r2, [r3, #0]
	}else{
		//disable the ack
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	}
}
 80016b2:	e005      	b.n	80016c0 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	601a      	str	r2, [r3, #0]
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr

080016ca <I2C_MasterSendData>:
 * @return            -  none
 *
 * @Note              -  none
 */
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxBuffer, uint8_t Len, uint8_t SlaveAddr, uint8_t Sr)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b084      	sub	sp, #16
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	60f8      	str	r0, [r7, #12]
 80016d2:	60b9      	str	r1, [r7, #8]
 80016d4:	4611      	mov	r1, r2
 80016d6:	461a      	mov	r2, r3
 80016d8:	460b      	mov	r3, r1
 80016da:	71fb      	strb	r3, [r7, #7]
 80016dc:	4613      	mov	r3, r2
 80016de:	71bb      	strb	r3, [r7, #6]
	// 1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff fe1b 	bl	8001320 <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB));
 80016ea:	bf00      	nop
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2101      	movs	r1, #1
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff ffbb 	bl	800166e <I2C_GetFlagStatus>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d0f6      	beq.n	80016ec <I2C_MasterSendData+0x22>

	//3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits )
	//while(!(pI2CHandle->pI2Cx->SR1 & (1 << 7)));
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx,SlaveAddr);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	79ba      	ldrb	r2, [r7, #6]
 8001704:	4611      	mov	r1, r2
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff fe28 	bl	800135c <I2C_ExecuteAddressPhaseWrite>

	//4. Confirm that address phase is completed by checking the ADDR flag in teh SR1
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR));
 800170c:	bf00      	nop
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2102      	movs	r1, #2
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff ffaa 	bl	800166e <I2C_GetFlagStatus>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d0f6      	beq.n	800170e <I2C_MasterSendData+0x44>

	//5. clear the ADDR flag according to its software sequence
	//   Note: Until ADDR is cleared SCL will be stretched (pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle);
 8001720:	68f8      	ldr	r0, [r7, #12]
 8001722:	f7ff fe45 	bl	80013b0 <I2C_ClearADDRFlag>

	//6. send the data until len becomes 0
	while(Len > 0){
 8001726:	e014      	b.n	8001752 <I2C_MasterSendData+0x88>

		//wait until the TXE flag is set
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE));
 8001728:	bf00      	nop
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2180      	movs	r1, #128	@ 0x80
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff ff9c 	bl	800166e <I2C_GetFlagStatus>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d0f6      	beq.n	800172a <I2C_MasterSendData+0x60>
		pI2CHandle->pI2Cx->DR = *pTxBuffer;
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	781a      	ldrb	r2, [r3, #0]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	611a      	str	r2, [r3, #16]
		pTxBuffer++;
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	3301      	adds	r3, #1
 800174a:	60bb      	str	r3, [r7, #8]
		Len--;
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	3b01      	subs	r3, #1
 8001750:	71fb      	strb	r3, [r7, #7]
	while(Len > 0){
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1e7      	bne.n	8001728 <I2C_MasterSendData+0x5e>
	}

	//7. when Len becomes zero wait for TXE=1 and BTF=1 before generating the STOP condition
	//   Note: TXE=1 , BTF=1 , means that both SR and DR are empty and next transmission should begin
	//   when BTF=1 SCL will be stretched (pulled to LOW)
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE));
 8001758:	bf00      	nop
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2180      	movs	r1, #128	@ 0x80
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff ff84 	bl	800166e <I2C_GetFlagStatus>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d0f6      	beq.n	800175a <I2C_MasterSendData+0x90>

	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_BTF));
 800176c:	bf00      	nop
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2104      	movs	r1, #4
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff ff7a 	bl	800166e <I2C_GetFlagStatus>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d0f6      	beq.n	800176e <I2C_MasterSendData+0xa4>

	//8. Generate STOP condition and master need not to wait for the completion of stop condition.
	//   Note: generating STOP, automatically clears the BTF
	if(Sr == I2C_DISABLE_SR){
 8001780:	7e3b      	ldrb	r3, [r7, #24]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d104      	bne.n	8001790 <I2C_MasterSendData+0xc6>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff fdd7 	bl	800133e <I2C_GenerateStopCondition>
	}
}
 8001790:	bf00      	nop
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <I2C_MasterReceiveData>:
 *
 * @return            -  none
 *
 * @Note              -  none
 */
void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle, uint8_t *pRxBuffer, uint8_t Len, uint8_t SlaveAddr, uint8_t Sr){
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	4611      	mov	r1, r2
 80017a4:	461a      	mov	r2, r3
 80017a6:	460b      	mov	r3, r1
 80017a8:	71fb      	strb	r3, [r7, #7]
 80017aa:	4613      	mov	r3, r2
 80017ac:	71bb      	strb	r3, [r7, #6]

	// 1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff fdb4 	bl	8001320 <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB));
 80017b8:	bf00      	nop
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2101      	movs	r1, #1
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff ff54 	bl	800166e <I2C_GetFlagStatus>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d0f6      	beq.n	80017ba <I2C_MasterReceiveData+0x22>

	//3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits )
	//while(!(pI2CHandle->pI2Cx->SR1 & (1 << 7)));
	I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx,SlaveAddr);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	79ba      	ldrb	r2, [r7, #6]
 80017d2:	4611      	mov	r1, r2
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff fdd6 	bl	8001386 <I2C_ExecuteAddressPhaseRead>

	//4. Confirm that address phase is completed by checking the ADDR flag in teh SR1
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR));
 80017da:	bf00      	nop
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2102      	movs	r1, #2
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff ff43 	bl	800166e <I2C_GetFlagStatus>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0f6      	beq.n	80017dc <I2C_MasterReceiveData+0x44>

	//procedure  to read only byte from slave
	if(Len == 1){
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d121      	bne.n	8001838 <I2C_MasterReceiveData+0xa0>

		//Disable ACK
		I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2100      	movs	r1, #0
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff ff4a 	bl	8001694 <I2C_ManageAcking>

		//Clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 8001800:	68f8      	ldr	r0, [r7, #12]
 8001802:	f7ff fdd5 	bl	80013b0 <I2C_ClearADDRFlag>

		//Wait till RXNE becomes 1
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RxNE));
 8001806:	bf00      	nop
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2140      	movs	r1, #64	@ 0x40
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff ff2d 	bl	800166e <I2C_GetFlagStatus>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d0f6      	beq.n	8001808 <I2C_MasterReceiveData+0x70>

		//Generate STOP condition
		if(Sr == I2C_DISABLE_SR){
 800181a:	7e3b      	ldrb	r3, [r7, #24]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d104      	bne.n	800182a <I2C_MasterReceiveData+0x92>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff fd8a 	bl	800133e <I2C_GenerateStopCondition>
		}

		//Read data in to buffer
		*pRxBuffer = pI2CHandle->pI2Cx->DR;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	691b      	ldr	r3, [r3, #16]
 8001830:	b2da      	uxtb	r2, r3
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	701a      	strb	r2, [r3, #0]
 8001836:	e030      	b.n	800189a <I2C_MasterReceiveData+0x102>


	}else if(Len > 1){
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d92d      	bls.n	800189a <I2C_MasterReceiveData+0x102>

		//Clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 800183e:	68f8      	ldr	r0, [r7, #12]
 8001840:	f7ff fdb6 	bl	80013b0 <I2C_ClearADDRFlag>

		while(Len > 0){
 8001844:	e026      	b.n	8001894 <I2C_MasterReceiveData+0xfc>

			//wait until RXNE becomes 1
			while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RxNE));
 8001846:	bf00      	nop
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2140      	movs	r1, #64	@ 0x40
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff ff0d 	bl	800166e <I2C_GetFlagStatus>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d0f6      	beq.n	8001848 <I2C_MasterReceiveData+0xb0>

			//if last 2 bytes are remaining
			if(Len == 2){
 800185a:	79fb      	ldrb	r3, [r7, #7]
 800185c:	2b02      	cmp	r3, #2
 800185e:	d10d      	bne.n	800187c <I2C_MasterReceiveData+0xe4>
				//clear the ack bit
				I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2100      	movs	r1, #0
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff ff14 	bl	8001694 <I2C_ManageAcking>

				//generate the STOP condition
				if(Sr == I2C_DISABLE_SR){
 800186c:	7e3b      	ldrb	r3, [r7, #24]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d104      	bne.n	800187c <I2C_MasterReceiveData+0xe4>
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff fd61 	bl	800133e <I2C_GenerateStopCondition>
				}
			}

			//read data from data register in to  buffer
			*pRxBuffer = pI2CHandle->pI2Cx->DR;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	b2da      	uxtb	r2, r3
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	701a      	strb	r2, [r3, #0]

			//increment the buffer address
			pRxBuffer++;
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	3301      	adds	r3, #1
 800188c:	60bb      	str	r3, [r7, #8]

			//decrement the Length
			Len--;
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	3b01      	subs	r3, #1
 8001892:	71fb      	strb	r3, [r7, #7]
		while(Len > 0){
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1d5      	bne.n	8001846 <I2C_MasterReceiveData+0xae>
		}
	}

	if(pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLE){
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	7a5b      	ldrb	r3, [r3, #9]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d105      	bne.n	80018ae <I2C_MasterReceiveData+0x116>
		//re-enable ACKING
		I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_ENABLE);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2101      	movs	r1, #1
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff fef3 	bl	8001694 <I2C_ManageAcking>
	}
}
 80018ae:	bf00      	nop
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <RCC_GetPLLOutputClock>:

uint16_t AHB_Prescaler[8] = {2, 4, 8, 16, 64, 128, 256, 512};
uint8_t APB1_Prescaler[4] = {2, 4, 8, 16};
uint8_t APB2_Prescaler[4] = {2, 4, 8, 16};

uint32_t RCC_GetPLLOutputClock(void){
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0
	return 0;
 80018ba:	2300      	movs	r3, #0
}
 80018bc:	4618      	mov	r0, r3
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr

080018c4 <RCC_GetPCLK1Value>:

uint32_t RCC_GetPCLK1Value(void){
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0

	uint32_t pclk1, SystemClk;
	uint8_t clksrc, temp, ahbp, apb1;

	clksrc = (RCC->CFGR >> 2) & 0x3;
 80018ca:	4b25      	ldr	r3, [pc, #148]	@ (8001960 <RCC_GetPCLK1Value+0x9c>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	089b      	lsrs	r3, r3, #2
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	f003 0303 	and.w	r3, r3, #3
 80018d6:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0){
 80018d8:	7a7b      	ldrb	r3, [r7, #9]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d102      	bne.n	80018e4 <RCC_GetPCLK1Value+0x20>
		SystemClk = 16000000;
 80018de:	4b21      	ldr	r3, [pc, #132]	@ (8001964 <RCC_GetPCLK1Value+0xa0>)
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	e00b      	b.n	80018fc <RCC_GetPCLK1Value+0x38>
	}
	else if(clksrc == 1){
 80018e4:	7a7b      	ldrb	r3, [r7, #9]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d102      	bne.n	80018f0 <RCC_GetPCLK1Value+0x2c>
		SystemClk = 8000000;
 80018ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001968 <RCC_GetPCLK1Value+0xa4>)
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	e005      	b.n	80018fc <RCC_GetPCLK1Value+0x38>
	}
	else if(clksrc == 2){
 80018f0:	7a7b      	ldrb	r3, [r7, #9]
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d102      	bne.n	80018fc <RCC_GetPCLK1Value+0x38>
		SystemClk = RCC_GetPLLOutputClock();
 80018f6:	f7ff ffde 	bl	80018b6 <RCC_GetPLLOutputClock>
 80018fa:	60f8      	str	r0, [r7, #12]
	}

	//for AHB
	temp = (RCC->CFGR >> 4) & 0xf;
 80018fc:	4b18      	ldr	r3, [pc, #96]	@ (8001960 <RCC_GetPCLK1Value+0x9c>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	091b      	lsrs	r3, r3, #4
 8001902:	b2db      	uxtb	r3, r3
 8001904:	f003 030f 	and.w	r3, r3, #15
 8001908:	723b      	strb	r3, [r7, #8]
	if(temp < 8){
 800190a:	7a3b      	ldrb	r3, [r7, #8]
 800190c:	2b07      	cmp	r3, #7
 800190e:	d802      	bhi.n	8001916 <RCC_GetPCLK1Value+0x52>
		ahbp = 1;
 8001910:	2301      	movs	r3, #1
 8001912:	72fb      	strb	r3, [r7, #11]
 8001914:	e005      	b.n	8001922 <RCC_GetPCLK1Value+0x5e>
	}
	else{
		ahbp = AHB_Prescaler[temp-8];
 8001916:	7a3b      	ldrb	r3, [r7, #8]
 8001918:	3b08      	subs	r3, #8
 800191a:	4a14      	ldr	r2, [pc, #80]	@ (800196c <RCC_GetPCLK1Value+0xa8>)
 800191c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001920:	72fb      	strb	r3, [r7, #11]
	}

	//for APB1
	temp = (RCC->CFGR >> 10) & 0x7;
 8001922:	4b0f      	ldr	r3, [pc, #60]	@ (8001960 <RCC_GetPCLK1Value+0x9c>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	0a9b      	lsrs	r3, r3, #10
 8001928:	b2db      	uxtb	r3, r3
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	723b      	strb	r3, [r7, #8]
	if(temp < 4){
 8001930:	7a3b      	ldrb	r3, [r7, #8]
 8001932:	2b03      	cmp	r3, #3
 8001934:	d802      	bhi.n	800193c <RCC_GetPCLK1Value+0x78>
		apb1 = 1;
 8001936:	2301      	movs	r3, #1
 8001938:	72bb      	strb	r3, [r7, #10]
 800193a:	e004      	b.n	8001946 <RCC_GetPCLK1Value+0x82>
	}
	else{
		apb1 = APB1_Prescaler[temp-4];
 800193c:	7a3b      	ldrb	r3, [r7, #8]
 800193e:	3b04      	subs	r3, #4
 8001940:	4a0b      	ldr	r2, [pc, #44]	@ (8001970 <RCC_GetPCLK1Value+0xac>)
 8001942:	5cd3      	ldrb	r3, [r2, r3]
 8001944:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (SystemClk / ahbp) / apb1;
 8001946:	7afb      	ldrb	r3, [r7, #11]
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	fbb2 f2f3 	udiv	r2, r2, r3
 800194e:	7abb      	ldrb	r3, [r7, #10]
 8001950:	fbb2 f3f3 	udiv	r3, r2, r3
 8001954:	607b      	str	r3, [r7, #4]

	return pclk1;
 8001956:	687b      	ldr	r3, [r7, #4]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40023800 	.word	0x40023800
 8001964:	00f42400 	.word	0x00f42400
 8001968:	007a1200 	.word	0x007a1200
 800196c:	20000000 	.word	0x20000000
 8001970:	20000010 	.word	0x20000010

08001974 <std>:
 8001974:	2300      	movs	r3, #0
 8001976:	b510      	push	{r4, lr}
 8001978:	4604      	mov	r4, r0
 800197a:	e9c0 3300 	strd	r3, r3, [r0]
 800197e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001982:	6083      	str	r3, [r0, #8]
 8001984:	8181      	strh	r1, [r0, #12]
 8001986:	6643      	str	r3, [r0, #100]	@ 0x64
 8001988:	81c2      	strh	r2, [r0, #14]
 800198a:	6183      	str	r3, [r0, #24]
 800198c:	4619      	mov	r1, r3
 800198e:	2208      	movs	r2, #8
 8001990:	305c      	adds	r0, #92	@ 0x5c
 8001992:	f000 f9e7 	bl	8001d64 <memset>
 8001996:	4b0d      	ldr	r3, [pc, #52]	@ (80019cc <std+0x58>)
 8001998:	6263      	str	r3, [r4, #36]	@ 0x24
 800199a:	4b0d      	ldr	r3, [pc, #52]	@ (80019d0 <std+0x5c>)
 800199c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800199e:	4b0d      	ldr	r3, [pc, #52]	@ (80019d4 <std+0x60>)
 80019a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80019a2:	4b0d      	ldr	r3, [pc, #52]	@ (80019d8 <std+0x64>)
 80019a4:	6323      	str	r3, [r4, #48]	@ 0x30
 80019a6:	4b0d      	ldr	r3, [pc, #52]	@ (80019dc <std+0x68>)
 80019a8:	6224      	str	r4, [r4, #32]
 80019aa:	429c      	cmp	r4, r3
 80019ac:	d006      	beq.n	80019bc <std+0x48>
 80019ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80019b2:	4294      	cmp	r4, r2
 80019b4:	d002      	beq.n	80019bc <std+0x48>
 80019b6:	33d0      	adds	r3, #208	@ 0xd0
 80019b8:	429c      	cmp	r4, r3
 80019ba:	d105      	bne.n	80019c8 <std+0x54>
 80019bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80019c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80019c4:	f000 ba46 	b.w	8001e54 <__retarget_lock_init_recursive>
 80019c8:	bd10      	pop	{r4, pc}
 80019ca:	bf00      	nop
 80019cc:	08001bb5 	.word	0x08001bb5
 80019d0:	08001bd7 	.word	0x08001bd7
 80019d4:	08001c0f 	.word	0x08001c0f
 80019d8:	08001c33 	.word	0x08001c33
 80019dc:	200000d0 	.word	0x200000d0

080019e0 <stdio_exit_handler>:
 80019e0:	4a02      	ldr	r2, [pc, #8]	@ (80019ec <stdio_exit_handler+0xc>)
 80019e2:	4903      	ldr	r1, [pc, #12]	@ (80019f0 <stdio_exit_handler+0x10>)
 80019e4:	4803      	ldr	r0, [pc, #12]	@ (80019f4 <stdio_exit_handler+0x14>)
 80019e6:	f000 b869 	b.w	8001abc <_fwalk_sglue>
 80019ea:	bf00      	nop
 80019ec:	20000014 	.word	0x20000014
 80019f0:	0800214d 	.word	0x0800214d
 80019f4:	20000024 	.word	0x20000024

080019f8 <cleanup_stdio>:
 80019f8:	6841      	ldr	r1, [r0, #4]
 80019fa:	4b0c      	ldr	r3, [pc, #48]	@ (8001a2c <cleanup_stdio+0x34>)
 80019fc:	4299      	cmp	r1, r3
 80019fe:	b510      	push	{r4, lr}
 8001a00:	4604      	mov	r4, r0
 8001a02:	d001      	beq.n	8001a08 <cleanup_stdio+0x10>
 8001a04:	f000 fba2 	bl	800214c <_fflush_r>
 8001a08:	68a1      	ldr	r1, [r4, #8]
 8001a0a:	4b09      	ldr	r3, [pc, #36]	@ (8001a30 <cleanup_stdio+0x38>)
 8001a0c:	4299      	cmp	r1, r3
 8001a0e:	d002      	beq.n	8001a16 <cleanup_stdio+0x1e>
 8001a10:	4620      	mov	r0, r4
 8001a12:	f000 fb9b 	bl	800214c <_fflush_r>
 8001a16:	68e1      	ldr	r1, [r4, #12]
 8001a18:	4b06      	ldr	r3, [pc, #24]	@ (8001a34 <cleanup_stdio+0x3c>)
 8001a1a:	4299      	cmp	r1, r3
 8001a1c:	d004      	beq.n	8001a28 <cleanup_stdio+0x30>
 8001a1e:	4620      	mov	r0, r4
 8001a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a24:	f000 bb92 	b.w	800214c <_fflush_r>
 8001a28:	bd10      	pop	{r4, pc}
 8001a2a:	bf00      	nop
 8001a2c:	200000d0 	.word	0x200000d0
 8001a30:	20000138 	.word	0x20000138
 8001a34:	200001a0 	.word	0x200001a0

08001a38 <global_stdio_init.part.0>:
 8001a38:	b510      	push	{r4, lr}
 8001a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a68 <global_stdio_init.part.0+0x30>)
 8001a3c:	4c0b      	ldr	r4, [pc, #44]	@ (8001a6c <global_stdio_init.part.0+0x34>)
 8001a3e:	4a0c      	ldr	r2, [pc, #48]	@ (8001a70 <global_stdio_init.part.0+0x38>)
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	4620      	mov	r0, r4
 8001a44:	2200      	movs	r2, #0
 8001a46:	2104      	movs	r1, #4
 8001a48:	f7ff ff94 	bl	8001974 <std>
 8001a4c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001a50:	2201      	movs	r2, #1
 8001a52:	2109      	movs	r1, #9
 8001a54:	f7ff ff8e 	bl	8001974 <std>
 8001a58:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a62:	2112      	movs	r1, #18
 8001a64:	f7ff bf86 	b.w	8001974 <std>
 8001a68:	20000208 	.word	0x20000208
 8001a6c:	200000d0 	.word	0x200000d0
 8001a70:	080019e1 	.word	0x080019e1

08001a74 <__sfp_lock_acquire>:
 8001a74:	4801      	ldr	r0, [pc, #4]	@ (8001a7c <__sfp_lock_acquire+0x8>)
 8001a76:	f000 b9ee 	b.w	8001e56 <__retarget_lock_acquire_recursive>
 8001a7a:	bf00      	nop
 8001a7c:	20000211 	.word	0x20000211

08001a80 <__sfp_lock_release>:
 8001a80:	4801      	ldr	r0, [pc, #4]	@ (8001a88 <__sfp_lock_release+0x8>)
 8001a82:	f000 b9e9 	b.w	8001e58 <__retarget_lock_release_recursive>
 8001a86:	bf00      	nop
 8001a88:	20000211 	.word	0x20000211

08001a8c <__sinit>:
 8001a8c:	b510      	push	{r4, lr}
 8001a8e:	4604      	mov	r4, r0
 8001a90:	f7ff fff0 	bl	8001a74 <__sfp_lock_acquire>
 8001a94:	6a23      	ldr	r3, [r4, #32]
 8001a96:	b11b      	cbz	r3, 8001aa0 <__sinit+0x14>
 8001a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a9c:	f7ff bff0 	b.w	8001a80 <__sfp_lock_release>
 8001aa0:	4b04      	ldr	r3, [pc, #16]	@ (8001ab4 <__sinit+0x28>)
 8001aa2:	6223      	str	r3, [r4, #32]
 8001aa4:	4b04      	ldr	r3, [pc, #16]	@ (8001ab8 <__sinit+0x2c>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1f5      	bne.n	8001a98 <__sinit+0xc>
 8001aac:	f7ff ffc4 	bl	8001a38 <global_stdio_init.part.0>
 8001ab0:	e7f2      	b.n	8001a98 <__sinit+0xc>
 8001ab2:	bf00      	nop
 8001ab4:	080019f9 	.word	0x080019f9
 8001ab8:	20000208 	.word	0x20000208

08001abc <_fwalk_sglue>:
 8001abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001ac0:	4607      	mov	r7, r0
 8001ac2:	4688      	mov	r8, r1
 8001ac4:	4614      	mov	r4, r2
 8001ac6:	2600      	movs	r6, #0
 8001ac8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001acc:	f1b9 0901 	subs.w	r9, r9, #1
 8001ad0:	d505      	bpl.n	8001ade <_fwalk_sglue+0x22>
 8001ad2:	6824      	ldr	r4, [r4, #0]
 8001ad4:	2c00      	cmp	r4, #0
 8001ad6:	d1f7      	bne.n	8001ac8 <_fwalk_sglue+0xc>
 8001ad8:	4630      	mov	r0, r6
 8001ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001ade:	89ab      	ldrh	r3, [r5, #12]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d907      	bls.n	8001af4 <_fwalk_sglue+0x38>
 8001ae4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	d003      	beq.n	8001af4 <_fwalk_sglue+0x38>
 8001aec:	4629      	mov	r1, r5
 8001aee:	4638      	mov	r0, r7
 8001af0:	47c0      	blx	r8
 8001af2:	4306      	orrs	r6, r0
 8001af4:	3568      	adds	r5, #104	@ 0x68
 8001af6:	e7e9      	b.n	8001acc <_fwalk_sglue+0x10>

08001af8 <_puts_r>:
 8001af8:	6a03      	ldr	r3, [r0, #32]
 8001afa:	b570      	push	{r4, r5, r6, lr}
 8001afc:	6884      	ldr	r4, [r0, #8]
 8001afe:	4605      	mov	r5, r0
 8001b00:	460e      	mov	r6, r1
 8001b02:	b90b      	cbnz	r3, 8001b08 <_puts_r+0x10>
 8001b04:	f7ff ffc2 	bl	8001a8c <__sinit>
 8001b08:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001b0a:	07db      	lsls	r3, r3, #31
 8001b0c:	d405      	bmi.n	8001b1a <_puts_r+0x22>
 8001b0e:	89a3      	ldrh	r3, [r4, #12]
 8001b10:	0598      	lsls	r0, r3, #22
 8001b12:	d402      	bmi.n	8001b1a <_puts_r+0x22>
 8001b14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001b16:	f000 f99e 	bl	8001e56 <__retarget_lock_acquire_recursive>
 8001b1a:	89a3      	ldrh	r3, [r4, #12]
 8001b1c:	0719      	lsls	r1, r3, #28
 8001b1e:	d502      	bpl.n	8001b26 <_puts_r+0x2e>
 8001b20:	6923      	ldr	r3, [r4, #16]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d135      	bne.n	8001b92 <_puts_r+0x9a>
 8001b26:	4621      	mov	r1, r4
 8001b28:	4628      	mov	r0, r5
 8001b2a:	f000 f8c5 	bl	8001cb8 <__swsetup_r>
 8001b2e:	b380      	cbz	r0, 8001b92 <_puts_r+0x9a>
 8001b30:	f04f 35ff 	mov.w	r5, #4294967295
 8001b34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001b36:	07da      	lsls	r2, r3, #31
 8001b38:	d405      	bmi.n	8001b46 <_puts_r+0x4e>
 8001b3a:	89a3      	ldrh	r3, [r4, #12]
 8001b3c:	059b      	lsls	r3, r3, #22
 8001b3e:	d402      	bmi.n	8001b46 <_puts_r+0x4e>
 8001b40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001b42:	f000 f989 	bl	8001e58 <__retarget_lock_release_recursive>
 8001b46:	4628      	mov	r0, r5
 8001b48:	bd70      	pop	{r4, r5, r6, pc}
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	da04      	bge.n	8001b58 <_puts_r+0x60>
 8001b4e:	69a2      	ldr	r2, [r4, #24]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	dc17      	bgt.n	8001b84 <_puts_r+0x8c>
 8001b54:	290a      	cmp	r1, #10
 8001b56:	d015      	beq.n	8001b84 <_puts_r+0x8c>
 8001b58:	6823      	ldr	r3, [r4, #0]
 8001b5a:	1c5a      	adds	r2, r3, #1
 8001b5c:	6022      	str	r2, [r4, #0]
 8001b5e:	7019      	strb	r1, [r3, #0]
 8001b60:	68a3      	ldr	r3, [r4, #8]
 8001b62:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001b66:	3b01      	subs	r3, #1
 8001b68:	60a3      	str	r3, [r4, #8]
 8001b6a:	2900      	cmp	r1, #0
 8001b6c:	d1ed      	bne.n	8001b4a <_puts_r+0x52>
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	da11      	bge.n	8001b96 <_puts_r+0x9e>
 8001b72:	4622      	mov	r2, r4
 8001b74:	210a      	movs	r1, #10
 8001b76:	4628      	mov	r0, r5
 8001b78:	f000 f85f 	bl	8001c3a <__swbuf_r>
 8001b7c:	3001      	adds	r0, #1
 8001b7e:	d0d7      	beq.n	8001b30 <_puts_r+0x38>
 8001b80:	250a      	movs	r5, #10
 8001b82:	e7d7      	b.n	8001b34 <_puts_r+0x3c>
 8001b84:	4622      	mov	r2, r4
 8001b86:	4628      	mov	r0, r5
 8001b88:	f000 f857 	bl	8001c3a <__swbuf_r>
 8001b8c:	3001      	adds	r0, #1
 8001b8e:	d1e7      	bne.n	8001b60 <_puts_r+0x68>
 8001b90:	e7ce      	b.n	8001b30 <_puts_r+0x38>
 8001b92:	3e01      	subs	r6, #1
 8001b94:	e7e4      	b.n	8001b60 <_puts_r+0x68>
 8001b96:	6823      	ldr	r3, [r4, #0]
 8001b98:	1c5a      	adds	r2, r3, #1
 8001b9a:	6022      	str	r2, [r4, #0]
 8001b9c:	220a      	movs	r2, #10
 8001b9e:	701a      	strb	r2, [r3, #0]
 8001ba0:	e7ee      	b.n	8001b80 <_puts_r+0x88>
	...

08001ba4 <puts>:
 8001ba4:	4b02      	ldr	r3, [pc, #8]	@ (8001bb0 <puts+0xc>)
 8001ba6:	4601      	mov	r1, r0
 8001ba8:	6818      	ldr	r0, [r3, #0]
 8001baa:	f7ff bfa5 	b.w	8001af8 <_puts_r>
 8001bae:	bf00      	nop
 8001bb0:	20000020 	.word	0x20000020

08001bb4 <__sread>:
 8001bb4:	b510      	push	{r4, lr}
 8001bb6:	460c      	mov	r4, r1
 8001bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001bbc:	f000 f8fc 	bl	8001db8 <_read_r>
 8001bc0:	2800      	cmp	r0, #0
 8001bc2:	bfab      	itete	ge
 8001bc4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001bc6:	89a3      	ldrhlt	r3, [r4, #12]
 8001bc8:	181b      	addge	r3, r3, r0
 8001bca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001bce:	bfac      	ite	ge
 8001bd0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001bd2:	81a3      	strhlt	r3, [r4, #12]
 8001bd4:	bd10      	pop	{r4, pc}

08001bd6 <__swrite>:
 8001bd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bda:	461f      	mov	r7, r3
 8001bdc:	898b      	ldrh	r3, [r1, #12]
 8001bde:	05db      	lsls	r3, r3, #23
 8001be0:	4605      	mov	r5, r0
 8001be2:	460c      	mov	r4, r1
 8001be4:	4616      	mov	r6, r2
 8001be6:	d505      	bpl.n	8001bf4 <__swrite+0x1e>
 8001be8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001bec:	2302      	movs	r3, #2
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f000 f8d0 	bl	8001d94 <_lseek_r>
 8001bf4:	89a3      	ldrh	r3, [r4, #12]
 8001bf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001bfa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001bfe:	81a3      	strh	r3, [r4, #12]
 8001c00:	4632      	mov	r2, r6
 8001c02:	463b      	mov	r3, r7
 8001c04:	4628      	mov	r0, r5
 8001c06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001c0a:	f000 b8e7 	b.w	8001ddc <_write_r>

08001c0e <__sseek>:
 8001c0e:	b510      	push	{r4, lr}
 8001c10:	460c      	mov	r4, r1
 8001c12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c16:	f000 f8bd 	bl	8001d94 <_lseek_r>
 8001c1a:	1c43      	adds	r3, r0, #1
 8001c1c:	89a3      	ldrh	r3, [r4, #12]
 8001c1e:	bf15      	itete	ne
 8001c20:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001c22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001c26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001c2a:	81a3      	strheq	r3, [r4, #12]
 8001c2c:	bf18      	it	ne
 8001c2e:	81a3      	strhne	r3, [r4, #12]
 8001c30:	bd10      	pop	{r4, pc}

08001c32 <__sclose>:
 8001c32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c36:	f000 b89d 	b.w	8001d74 <_close_r>

08001c3a <__swbuf_r>:
 8001c3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c3c:	460e      	mov	r6, r1
 8001c3e:	4614      	mov	r4, r2
 8001c40:	4605      	mov	r5, r0
 8001c42:	b118      	cbz	r0, 8001c4c <__swbuf_r+0x12>
 8001c44:	6a03      	ldr	r3, [r0, #32]
 8001c46:	b90b      	cbnz	r3, 8001c4c <__swbuf_r+0x12>
 8001c48:	f7ff ff20 	bl	8001a8c <__sinit>
 8001c4c:	69a3      	ldr	r3, [r4, #24]
 8001c4e:	60a3      	str	r3, [r4, #8]
 8001c50:	89a3      	ldrh	r3, [r4, #12]
 8001c52:	071a      	lsls	r2, r3, #28
 8001c54:	d501      	bpl.n	8001c5a <__swbuf_r+0x20>
 8001c56:	6923      	ldr	r3, [r4, #16]
 8001c58:	b943      	cbnz	r3, 8001c6c <__swbuf_r+0x32>
 8001c5a:	4621      	mov	r1, r4
 8001c5c:	4628      	mov	r0, r5
 8001c5e:	f000 f82b 	bl	8001cb8 <__swsetup_r>
 8001c62:	b118      	cbz	r0, 8001c6c <__swbuf_r+0x32>
 8001c64:	f04f 37ff 	mov.w	r7, #4294967295
 8001c68:	4638      	mov	r0, r7
 8001c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c6c:	6823      	ldr	r3, [r4, #0]
 8001c6e:	6922      	ldr	r2, [r4, #16]
 8001c70:	1a98      	subs	r0, r3, r2
 8001c72:	6963      	ldr	r3, [r4, #20]
 8001c74:	b2f6      	uxtb	r6, r6
 8001c76:	4283      	cmp	r3, r0
 8001c78:	4637      	mov	r7, r6
 8001c7a:	dc05      	bgt.n	8001c88 <__swbuf_r+0x4e>
 8001c7c:	4621      	mov	r1, r4
 8001c7e:	4628      	mov	r0, r5
 8001c80:	f000 fa64 	bl	800214c <_fflush_r>
 8001c84:	2800      	cmp	r0, #0
 8001c86:	d1ed      	bne.n	8001c64 <__swbuf_r+0x2a>
 8001c88:	68a3      	ldr	r3, [r4, #8]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	60a3      	str	r3, [r4, #8]
 8001c8e:	6823      	ldr	r3, [r4, #0]
 8001c90:	1c5a      	adds	r2, r3, #1
 8001c92:	6022      	str	r2, [r4, #0]
 8001c94:	701e      	strb	r6, [r3, #0]
 8001c96:	6962      	ldr	r2, [r4, #20]
 8001c98:	1c43      	adds	r3, r0, #1
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d004      	beq.n	8001ca8 <__swbuf_r+0x6e>
 8001c9e:	89a3      	ldrh	r3, [r4, #12]
 8001ca0:	07db      	lsls	r3, r3, #31
 8001ca2:	d5e1      	bpl.n	8001c68 <__swbuf_r+0x2e>
 8001ca4:	2e0a      	cmp	r6, #10
 8001ca6:	d1df      	bne.n	8001c68 <__swbuf_r+0x2e>
 8001ca8:	4621      	mov	r1, r4
 8001caa:	4628      	mov	r0, r5
 8001cac:	f000 fa4e 	bl	800214c <_fflush_r>
 8001cb0:	2800      	cmp	r0, #0
 8001cb2:	d0d9      	beq.n	8001c68 <__swbuf_r+0x2e>
 8001cb4:	e7d6      	b.n	8001c64 <__swbuf_r+0x2a>
	...

08001cb8 <__swsetup_r>:
 8001cb8:	b538      	push	{r3, r4, r5, lr}
 8001cba:	4b29      	ldr	r3, [pc, #164]	@ (8001d60 <__swsetup_r+0xa8>)
 8001cbc:	4605      	mov	r5, r0
 8001cbe:	6818      	ldr	r0, [r3, #0]
 8001cc0:	460c      	mov	r4, r1
 8001cc2:	b118      	cbz	r0, 8001ccc <__swsetup_r+0x14>
 8001cc4:	6a03      	ldr	r3, [r0, #32]
 8001cc6:	b90b      	cbnz	r3, 8001ccc <__swsetup_r+0x14>
 8001cc8:	f7ff fee0 	bl	8001a8c <__sinit>
 8001ccc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001cd0:	0719      	lsls	r1, r3, #28
 8001cd2:	d422      	bmi.n	8001d1a <__swsetup_r+0x62>
 8001cd4:	06da      	lsls	r2, r3, #27
 8001cd6:	d407      	bmi.n	8001ce8 <__swsetup_r+0x30>
 8001cd8:	2209      	movs	r2, #9
 8001cda:	602a      	str	r2, [r5, #0]
 8001cdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ce0:	81a3      	strh	r3, [r4, #12]
 8001ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce6:	e033      	b.n	8001d50 <__swsetup_r+0x98>
 8001ce8:	0758      	lsls	r0, r3, #29
 8001cea:	d512      	bpl.n	8001d12 <__swsetup_r+0x5a>
 8001cec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001cee:	b141      	cbz	r1, 8001d02 <__swsetup_r+0x4a>
 8001cf0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001cf4:	4299      	cmp	r1, r3
 8001cf6:	d002      	beq.n	8001cfe <__swsetup_r+0x46>
 8001cf8:	4628      	mov	r0, r5
 8001cfa:	f000 f8af 	bl	8001e5c <_free_r>
 8001cfe:	2300      	movs	r3, #0
 8001d00:	6363      	str	r3, [r4, #52]	@ 0x34
 8001d02:	89a3      	ldrh	r3, [r4, #12]
 8001d04:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001d08:	81a3      	strh	r3, [r4, #12]
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	6063      	str	r3, [r4, #4]
 8001d0e:	6923      	ldr	r3, [r4, #16]
 8001d10:	6023      	str	r3, [r4, #0]
 8001d12:	89a3      	ldrh	r3, [r4, #12]
 8001d14:	f043 0308 	orr.w	r3, r3, #8
 8001d18:	81a3      	strh	r3, [r4, #12]
 8001d1a:	6923      	ldr	r3, [r4, #16]
 8001d1c:	b94b      	cbnz	r3, 8001d32 <__swsetup_r+0x7a>
 8001d1e:	89a3      	ldrh	r3, [r4, #12]
 8001d20:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001d24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d28:	d003      	beq.n	8001d32 <__swsetup_r+0x7a>
 8001d2a:	4621      	mov	r1, r4
 8001d2c:	4628      	mov	r0, r5
 8001d2e:	f000 fa5b 	bl	80021e8 <__smakebuf_r>
 8001d32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d36:	f013 0201 	ands.w	r2, r3, #1
 8001d3a:	d00a      	beq.n	8001d52 <__swsetup_r+0x9a>
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	60a2      	str	r2, [r4, #8]
 8001d40:	6962      	ldr	r2, [r4, #20]
 8001d42:	4252      	negs	r2, r2
 8001d44:	61a2      	str	r2, [r4, #24]
 8001d46:	6922      	ldr	r2, [r4, #16]
 8001d48:	b942      	cbnz	r2, 8001d5c <__swsetup_r+0xa4>
 8001d4a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001d4e:	d1c5      	bne.n	8001cdc <__swsetup_r+0x24>
 8001d50:	bd38      	pop	{r3, r4, r5, pc}
 8001d52:	0799      	lsls	r1, r3, #30
 8001d54:	bf58      	it	pl
 8001d56:	6962      	ldrpl	r2, [r4, #20]
 8001d58:	60a2      	str	r2, [r4, #8]
 8001d5a:	e7f4      	b.n	8001d46 <__swsetup_r+0x8e>
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	e7f7      	b.n	8001d50 <__swsetup_r+0x98>
 8001d60:	20000020 	.word	0x20000020

08001d64 <memset>:
 8001d64:	4402      	add	r2, r0
 8001d66:	4603      	mov	r3, r0
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d100      	bne.n	8001d6e <memset+0xa>
 8001d6c:	4770      	bx	lr
 8001d6e:	f803 1b01 	strb.w	r1, [r3], #1
 8001d72:	e7f9      	b.n	8001d68 <memset+0x4>

08001d74 <_close_r>:
 8001d74:	b538      	push	{r3, r4, r5, lr}
 8001d76:	4d06      	ldr	r5, [pc, #24]	@ (8001d90 <_close_r+0x1c>)
 8001d78:	2300      	movs	r3, #0
 8001d7a:	4604      	mov	r4, r0
 8001d7c:	4608      	mov	r0, r1
 8001d7e:	602b      	str	r3, [r5, #0]
 8001d80:	f7fe ffad 	bl	8000cde <_close>
 8001d84:	1c43      	adds	r3, r0, #1
 8001d86:	d102      	bne.n	8001d8e <_close_r+0x1a>
 8001d88:	682b      	ldr	r3, [r5, #0]
 8001d8a:	b103      	cbz	r3, 8001d8e <_close_r+0x1a>
 8001d8c:	6023      	str	r3, [r4, #0]
 8001d8e:	bd38      	pop	{r3, r4, r5, pc}
 8001d90:	2000020c 	.word	0x2000020c

08001d94 <_lseek_r>:
 8001d94:	b538      	push	{r3, r4, r5, lr}
 8001d96:	4d07      	ldr	r5, [pc, #28]	@ (8001db4 <_lseek_r+0x20>)
 8001d98:	4604      	mov	r4, r0
 8001d9a:	4608      	mov	r0, r1
 8001d9c:	4611      	mov	r1, r2
 8001d9e:	2200      	movs	r2, #0
 8001da0:	602a      	str	r2, [r5, #0]
 8001da2:	461a      	mov	r2, r3
 8001da4:	f7fe ffbf 	bl	8000d26 <_lseek>
 8001da8:	1c43      	adds	r3, r0, #1
 8001daa:	d102      	bne.n	8001db2 <_lseek_r+0x1e>
 8001dac:	682b      	ldr	r3, [r5, #0]
 8001dae:	b103      	cbz	r3, 8001db2 <_lseek_r+0x1e>
 8001db0:	6023      	str	r3, [r4, #0]
 8001db2:	bd38      	pop	{r3, r4, r5, pc}
 8001db4:	2000020c 	.word	0x2000020c

08001db8 <_read_r>:
 8001db8:	b538      	push	{r3, r4, r5, lr}
 8001dba:	4d07      	ldr	r5, [pc, #28]	@ (8001dd8 <_read_r+0x20>)
 8001dbc:	4604      	mov	r4, r0
 8001dbe:	4608      	mov	r0, r1
 8001dc0:	4611      	mov	r1, r2
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	602a      	str	r2, [r5, #0]
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	f7fe ff50 	bl	8000c6c <_read>
 8001dcc:	1c43      	adds	r3, r0, #1
 8001dce:	d102      	bne.n	8001dd6 <_read_r+0x1e>
 8001dd0:	682b      	ldr	r3, [r5, #0]
 8001dd2:	b103      	cbz	r3, 8001dd6 <_read_r+0x1e>
 8001dd4:	6023      	str	r3, [r4, #0]
 8001dd6:	bd38      	pop	{r3, r4, r5, pc}
 8001dd8:	2000020c 	.word	0x2000020c

08001ddc <_write_r>:
 8001ddc:	b538      	push	{r3, r4, r5, lr}
 8001dde:	4d07      	ldr	r5, [pc, #28]	@ (8001dfc <_write_r+0x20>)
 8001de0:	4604      	mov	r4, r0
 8001de2:	4608      	mov	r0, r1
 8001de4:	4611      	mov	r1, r2
 8001de6:	2200      	movs	r2, #0
 8001de8:	602a      	str	r2, [r5, #0]
 8001dea:	461a      	mov	r2, r3
 8001dec:	f7fe ff5b 	bl	8000ca6 <_write>
 8001df0:	1c43      	adds	r3, r0, #1
 8001df2:	d102      	bne.n	8001dfa <_write_r+0x1e>
 8001df4:	682b      	ldr	r3, [r5, #0]
 8001df6:	b103      	cbz	r3, 8001dfa <_write_r+0x1e>
 8001df8:	6023      	str	r3, [r4, #0]
 8001dfa:	bd38      	pop	{r3, r4, r5, pc}
 8001dfc:	2000020c 	.word	0x2000020c

08001e00 <__errno>:
 8001e00:	4b01      	ldr	r3, [pc, #4]	@ (8001e08 <__errno+0x8>)
 8001e02:	6818      	ldr	r0, [r3, #0]
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	20000020 	.word	0x20000020

08001e0c <__libc_init_array>:
 8001e0c:	b570      	push	{r4, r5, r6, lr}
 8001e0e:	4d0d      	ldr	r5, [pc, #52]	@ (8001e44 <__libc_init_array+0x38>)
 8001e10:	4c0d      	ldr	r4, [pc, #52]	@ (8001e48 <__libc_init_array+0x3c>)
 8001e12:	1b64      	subs	r4, r4, r5
 8001e14:	10a4      	asrs	r4, r4, #2
 8001e16:	2600      	movs	r6, #0
 8001e18:	42a6      	cmp	r6, r4
 8001e1a:	d109      	bne.n	8001e30 <__libc_init_array+0x24>
 8001e1c:	4d0b      	ldr	r5, [pc, #44]	@ (8001e4c <__libc_init_array+0x40>)
 8001e1e:	4c0c      	ldr	r4, [pc, #48]	@ (8001e50 <__libc_init_array+0x44>)
 8001e20:	f000 fa50 	bl	80022c4 <_init>
 8001e24:	1b64      	subs	r4, r4, r5
 8001e26:	10a4      	asrs	r4, r4, #2
 8001e28:	2600      	movs	r6, #0
 8001e2a:	42a6      	cmp	r6, r4
 8001e2c:	d105      	bne.n	8001e3a <__libc_init_array+0x2e>
 8001e2e:	bd70      	pop	{r4, r5, r6, pc}
 8001e30:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e34:	4798      	blx	r3
 8001e36:	3601      	adds	r6, #1
 8001e38:	e7ee      	b.n	8001e18 <__libc_init_array+0xc>
 8001e3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e3e:	4798      	blx	r3
 8001e40:	3601      	adds	r6, #1
 8001e42:	e7f2      	b.n	8001e2a <__libc_init_array+0x1e>
 8001e44:	08002364 	.word	0x08002364
 8001e48:	08002364 	.word	0x08002364
 8001e4c:	08002364 	.word	0x08002364
 8001e50:	08002368 	.word	0x08002368

08001e54 <__retarget_lock_init_recursive>:
 8001e54:	4770      	bx	lr

08001e56 <__retarget_lock_acquire_recursive>:
 8001e56:	4770      	bx	lr

08001e58 <__retarget_lock_release_recursive>:
 8001e58:	4770      	bx	lr
	...

08001e5c <_free_r>:
 8001e5c:	b538      	push	{r3, r4, r5, lr}
 8001e5e:	4605      	mov	r5, r0
 8001e60:	2900      	cmp	r1, #0
 8001e62:	d041      	beq.n	8001ee8 <_free_r+0x8c>
 8001e64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e68:	1f0c      	subs	r4, r1, #4
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	bfb8      	it	lt
 8001e6e:	18e4      	addlt	r4, r4, r3
 8001e70:	f000 f8e0 	bl	8002034 <__malloc_lock>
 8001e74:	4a1d      	ldr	r2, [pc, #116]	@ (8001eec <_free_r+0x90>)
 8001e76:	6813      	ldr	r3, [r2, #0]
 8001e78:	b933      	cbnz	r3, 8001e88 <_free_r+0x2c>
 8001e7a:	6063      	str	r3, [r4, #4]
 8001e7c:	6014      	str	r4, [r2, #0]
 8001e7e:	4628      	mov	r0, r5
 8001e80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001e84:	f000 b8dc 	b.w	8002040 <__malloc_unlock>
 8001e88:	42a3      	cmp	r3, r4
 8001e8a:	d908      	bls.n	8001e9e <_free_r+0x42>
 8001e8c:	6820      	ldr	r0, [r4, #0]
 8001e8e:	1821      	adds	r1, r4, r0
 8001e90:	428b      	cmp	r3, r1
 8001e92:	bf01      	itttt	eq
 8001e94:	6819      	ldreq	r1, [r3, #0]
 8001e96:	685b      	ldreq	r3, [r3, #4]
 8001e98:	1809      	addeq	r1, r1, r0
 8001e9a:	6021      	streq	r1, [r4, #0]
 8001e9c:	e7ed      	b.n	8001e7a <_free_r+0x1e>
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	b10b      	cbz	r3, 8001ea8 <_free_r+0x4c>
 8001ea4:	42a3      	cmp	r3, r4
 8001ea6:	d9fa      	bls.n	8001e9e <_free_r+0x42>
 8001ea8:	6811      	ldr	r1, [r2, #0]
 8001eaa:	1850      	adds	r0, r2, r1
 8001eac:	42a0      	cmp	r0, r4
 8001eae:	d10b      	bne.n	8001ec8 <_free_r+0x6c>
 8001eb0:	6820      	ldr	r0, [r4, #0]
 8001eb2:	4401      	add	r1, r0
 8001eb4:	1850      	adds	r0, r2, r1
 8001eb6:	4283      	cmp	r3, r0
 8001eb8:	6011      	str	r1, [r2, #0]
 8001eba:	d1e0      	bne.n	8001e7e <_free_r+0x22>
 8001ebc:	6818      	ldr	r0, [r3, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	6053      	str	r3, [r2, #4]
 8001ec2:	4408      	add	r0, r1
 8001ec4:	6010      	str	r0, [r2, #0]
 8001ec6:	e7da      	b.n	8001e7e <_free_r+0x22>
 8001ec8:	d902      	bls.n	8001ed0 <_free_r+0x74>
 8001eca:	230c      	movs	r3, #12
 8001ecc:	602b      	str	r3, [r5, #0]
 8001ece:	e7d6      	b.n	8001e7e <_free_r+0x22>
 8001ed0:	6820      	ldr	r0, [r4, #0]
 8001ed2:	1821      	adds	r1, r4, r0
 8001ed4:	428b      	cmp	r3, r1
 8001ed6:	bf04      	itt	eq
 8001ed8:	6819      	ldreq	r1, [r3, #0]
 8001eda:	685b      	ldreq	r3, [r3, #4]
 8001edc:	6063      	str	r3, [r4, #4]
 8001ede:	bf04      	itt	eq
 8001ee0:	1809      	addeq	r1, r1, r0
 8001ee2:	6021      	streq	r1, [r4, #0]
 8001ee4:	6054      	str	r4, [r2, #4]
 8001ee6:	e7ca      	b.n	8001e7e <_free_r+0x22>
 8001ee8:	bd38      	pop	{r3, r4, r5, pc}
 8001eea:	bf00      	nop
 8001eec:	20000218 	.word	0x20000218

08001ef0 <sbrk_aligned>:
 8001ef0:	b570      	push	{r4, r5, r6, lr}
 8001ef2:	4e0f      	ldr	r6, [pc, #60]	@ (8001f30 <sbrk_aligned+0x40>)
 8001ef4:	460c      	mov	r4, r1
 8001ef6:	6831      	ldr	r1, [r6, #0]
 8001ef8:	4605      	mov	r5, r0
 8001efa:	b911      	cbnz	r1, 8001f02 <sbrk_aligned+0x12>
 8001efc:	f000 f9d2 	bl	80022a4 <_sbrk_r>
 8001f00:	6030      	str	r0, [r6, #0]
 8001f02:	4621      	mov	r1, r4
 8001f04:	4628      	mov	r0, r5
 8001f06:	f000 f9cd 	bl	80022a4 <_sbrk_r>
 8001f0a:	1c43      	adds	r3, r0, #1
 8001f0c:	d103      	bne.n	8001f16 <sbrk_aligned+0x26>
 8001f0e:	f04f 34ff 	mov.w	r4, #4294967295
 8001f12:	4620      	mov	r0, r4
 8001f14:	bd70      	pop	{r4, r5, r6, pc}
 8001f16:	1cc4      	adds	r4, r0, #3
 8001f18:	f024 0403 	bic.w	r4, r4, #3
 8001f1c:	42a0      	cmp	r0, r4
 8001f1e:	d0f8      	beq.n	8001f12 <sbrk_aligned+0x22>
 8001f20:	1a21      	subs	r1, r4, r0
 8001f22:	4628      	mov	r0, r5
 8001f24:	f000 f9be 	bl	80022a4 <_sbrk_r>
 8001f28:	3001      	adds	r0, #1
 8001f2a:	d1f2      	bne.n	8001f12 <sbrk_aligned+0x22>
 8001f2c:	e7ef      	b.n	8001f0e <sbrk_aligned+0x1e>
 8001f2e:	bf00      	nop
 8001f30:	20000214 	.word	0x20000214

08001f34 <_malloc_r>:
 8001f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f38:	1ccd      	adds	r5, r1, #3
 8001f3a:	f025 0503 	bic.w	r5, r5, #3
 8001f3e:	3508      	adds	r5, #8
 8001f40:	2d0c      	cmp	r5, #12
 8001f42:	bf38      	it	cc
 8001f44:	250c      	movcc	r5, #12
 8001f46:	2d00      	cmp	r5, #0
 8001f48:	4606      	mov	r6, r0
 8001f4a:	db01      	blt.n	8001f50 <_malloc_r+0x1c>
 8001f4c:	42a9      	cmp	r1, r5
 8001f4e:	d904      	bls.n	8001f5a <_malloc_r+0x26>
 8001f50:	230c      	movs	r3, #12
 8001f52:	6033      	str	r3, [r6, #0]
 8001f54:	2000      	movs	r0, #0
 8001f56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001f5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002030 <_malloc_r+0xfc>
 8001f5e:	f000 f869 	bl	8002034 <__malloc_lock>
 8001f62:	f8d8 3000 	ldr.w	r3, [r8]
 8001f66:	461c      	mov	r4, r3
 8001f68:	bb44      	cbnz	r4, 8001fbc <_malloc_r+0x88>
 8001f6a:	4629      	mov	r1, r5
 8001f6c:	4630      	mov	r0, r6
 8001f6e:	f7ff ffbf 	bl	8001ef0 <sbrk_aligned>
 8001f72:	1c43      	adds	r3, r0, #1
 8001f74:	4604      	mov	r4, r0
 8001f76:	d158      	bne.n	800202a <_malloc_r+0xf6>
 8001f78:	f8d8 4000 	ldr.w	r4, [r8]
 8001f7c:	4627      	mov	r7, r4
 8001f7e:	2f00      	cmp	r7, #0
 8001f80:	d143      	bne.n	800200a <_malloc_r+0xd6>
 8001f82:	2c00      	cmp	r4, #0
 8001f84:	d04b      	beq.n	800201e <_malloc_r+0xea>
 8001f86:	6823      	ldr	r3, [r4, #0]
 8001f88:	4639      	mov	r1, r7
 8001f8a:	4630      	mov	r0, r6
 8001f8c:	eb04 0903 	add.w	r9, r4, r3
 8001f90:	f000 f988 	bl	80022a4 <_sbrk_r>
 8001f94:	4581      	cmp	r9, r0
 8001f96:	d142      	bne.n	800201e <_malloc_r+0xea>
 8001f98:	6821      	ldr	r1, [r4, #0]
 8001f9a:	1a6d      	subs	r5, r5, r1
 8001f9c:	4629      	mov	r1, r5
 8001f9e:	4630      	mov	r0, r6
 8001fa0:	f7ff ffa6 	bl	8001ef0 <sbrk_aligned>
 8001fa4:	3001      	adds	r0, #1
 8001fa6:	d03a      	beq.n	800201e <_malloc_r+0xea>
 8001fa8:	6823      	ldr	r3, [r4, #0]
 8001faa:	442b      	add	r3, r5
 8001fac:	6023      	str	r3, [r4, #0]
 8001fae:	f8d8 3000 	ldr.w	r3, [r8]
 8001fb2:	685a      	ldr	r2, [r3, #4]
 8001fb4:	bb62      	cbnz	r2, 8002010 <_malloc_r+0xdc>
 8001fb6:	f8c8 7000 	str.w	r7, [r8]
 8001fba:	e00f      	b.n	8001fdc <_malloc_r+0xa8>
 8001fbc:	6822      	ldr	r2, [r4, #0]
 8001fbe:	1b52      	subs	r2, r2, r5
 8001fc0:	d420      	bmi.n	8002004 <_malloc_r+0xd0>
 8001fc2:	2a0b      	cmp	r2, #11
 8001fc4:	d917      	bls.n	8001ff6 <_malloc_r+0xc2>
 8001fc6:	1961      	adds	r1, r4, r5
 8001fc8:	42a3      	cmp	r3, r4
 8001fca:	6025      	str	r5, [r4, #0]
 8001fcc:	bf18      	it	ne
 8001fce:	6059      	strne	r1, [r3, #4]
 8001fd0:	6863      	ldr	r3, [r4, #4]
 8001fd2:	bf08      	it	eq
 8001fd4:	f8c8 1000 	streq.w	r1, [r8]
 8001fd8:	5162      	str	r2, [r4, r5]
 8001fda:	604b      	str	r3, [r1, #4]
 8001fdc:	4630      	mov	r0, r6
 8001fde:	f000 f82f 	bl	8002040 <__malloc_unlock>
 8001fe2:	f104 000b 	add.w	r0, r4, #11
 8001fe6:	1d23      	adds	r3, r4, #4
 8001fe8:	f020 0007 	bic.w	r0, r0, #7
 8001fec:	1ac2      	subs	r2, r0, r3
 8001fee:	bf1c      	itt	ne
 8001ff0:	1a1b      	subne	r3, r3, r0
 8001ff2:	50a3      	strne	r3, [r4, r2]
 8001ff4:	e7af      	b.n	8001f56 <_malloc_r+0x22>
 8001ff6:	6862      	ldr	r2, [r4, #4]
 8001ff8:	42a3      	cmp	r3, r4
 8001ffa:	bf0c      	ite	eq
 8001ffc:	f8c8 2000 	streq.w	r2, [r8]
 8002000:	605a      	strne	r2, [r3, #4]
 8002002:	e7eb      	b.n	8001fdc <_malloc_r+0xa8>
 8002004:	4623      	mov	r3, r4
 8002006:	6864      	ldr	r4, [r4, #4]
 8002008:	e7ae      	b.n	8001f68 <_malloc_r+0x34>
 800200a:	463c      	mov	r4, r7
 800200c:	687f      	ldr	r7, [r7, #4]
 800200e:	e7b6      	b.n	8001f7e <_malloc_r+0x4a>
 8002010:	461a      	mov	r2, r3
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	42a3      	cmp	r3, r4
 8002016:	d1fb      	bne.n	8002010 <_malloc_r+0xdc>
 8002018:	2300      	movs	r3, #0
 800201a:	6053      	str	r3, [r2, #4]
 800201c:	e7de      	b.n	8001fdc <_malloc_r+0xa8>
 800201e:	230c      	movs	r3, #12
 8002020:	6033      	str	r3, [r6, #0]
 8002022:	4630      	mov	r0, r6
 8002024:	f000 f80c 	bl	8002040 <__malloc_unlock>
 8002028:	e794      	b.n	8001f54 <_malloc_r+0x20>
 800202a:	6005      	str	r5, [r0, #0]
 800202c:	e7d6      	b.n	8001fdc <_malloc_r+0xa8>
 800202e:	bf00      	nop
 8002030:	20000218 	.word	0x20000218

08002034 <__malloc_lock>:
 8002034:	4801      	ldr	r0, [pc, #4]	@ (800203c <__malloc_lock+0x8>)
 8002036:	f7ff bf0e 	b.w	8001e56 <__retarget_lock_acquire_recursive>
 800203a:	bf00      	nop
 800203c:	20000210 	.word	0x20000210

08002040 <__malloc_unlock>:
 8002040:	4801      	ldr	r0, [pc, #4]	@ (8002048 <__malloc_unlock+0x8>)
 8002042:	f7ff bf09 	b.w	8001e58 <__retarget_lock_release_recursive>
 8002046:	bf00      	nop
 8002048:	20000210 	.word	0x20000210

0800204c <__sflush_r>:
 800204c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002052:	0716      	lsls	r6, r2, #28
 8002054:	4605      	mov	r5, r0
 8002056:	460c      	mov	r4, r1
 8002058:	d454      	bmi.n	8002104 <__sflush_r+0xb8>
 800205a:	684b      	ldr	r3, [r1, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	dc02      	bgt.n	8002066 <__sflush_r+0x1a>
 8002060:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002062:	2b00      	cmp	r3, #0
 8002064:	dd48      	ble.n	80020f8 <__sflush_r+0xac>
 8002066:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002068:	2e00      	cmp	r6, #0
 800206a:	d045      	beq.n	80020f8 <__sflush_r+0xac>
 800206c:	2300      	movs	r3, #0
 800206e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002072:	682f      	ldr	r7, [r5, #0]
 8002074:	6a21      	ldr	r1, [r4, #32]
 8002076:	602b      	str	r3, [r5, #0]
 8002078:	d030      	beq.n	80020dc <__sflush_r+0x90>
 800207a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800207c:	89a3      	ldrh	r3, [r4, #12]
 800207e:	0759      	lsls	r1, r3, #29
 8002080:	d505      	bpl.n	800208e <__sflush_r+0x42>
 8002082:	6863      	ldr	r3, [r4, #4]
 8002084:	1ad2      	subs	r2, r2, r3
 8002086:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002088:	b10b      	cbz	r3, 800208e <__sflush_r+0x42>
 800208a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800208c:	1ad2      	subs	r2, r2, r3
 800208e:	2300      	movs	r3, #0
 8002090:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002092:	6a21      	ldr	r1, [r4, #32]
 8002094:	4628      	mov	r0, r5
 8002096:	47b0      	blx	r6
 8002098:	1c43      	adds	r3, r0, #1
 800209a:	89a3      	ldrh	r3, [r4, #12]
 800209c:	d106      	bne.n	80020ac <__sflush_r+0x60>
 800209e:	6829      	ldr	r1, [r5, #0]
 80020a0:	291d      	cmp	r1, #29
 80020a2:	d82b      	bhi.n	80020fc <__sflush_r+0xb0>
 80020a4:	4a28      	ldr	r2, [pc, #160]	@ (8002148 <__sflush_r+0xfc>)
 80020a6:	410a      	asrs	r2, r1
 80020a8:	07d6      	lsls	r6, r2, #31
 80020aa:	d427      	bmi.n	80020fc <__sflush_r+0xb0>
 80020ac:	2200      	movs	r2, #0
 80020ae:	6062      	str	r2, [r4, #4]
 80020b0:	04d9      	lsls	r1, r3, #19
 80020b2:	6922      	ldr	r2, [r4, #16]
 80020b4:	6022      	str	r2, [r4, #0]
 80020b6:	d504      	bpl.n	80020c2 <__sflush_r+0x76>
 80020b8:	1c42      	adds	r2, r0, #1
 80020ba:	d101      	bne.n	80020c0 <__sflush_r+0x74>
 80020bc:	682b      	ldr	r3, [r5, #0]
 80020be:	b903      	cbnz	r3, 80020c2 <__sflush_r+0x76>
 80020c0:	6560      	str	r0, [r4, #84]	@ 0x54
 80020c2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80020c4:	602f      	str	r7, [r5, #0]
 80020c6:	b1b9      	cbz	r1, 80020f8 <__sflush_r+0xac>
 80020c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80020cc:	4299      	cmp	r1, r3
 80020ce:	d002      	beq.n	80020d6 <__sflush_r+0x8a>
 80020d0:	4628      	mov	r0, r5
 80020d2:	f7ff fec3 	bl	8001e5c <_free_r>
 80020d6:	2300      	movs	r3, #0
 80020d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80020da:	e00d      	b.n	80020f8 <__sflush_r+0xac>
 80020dc:	2301      	movs	r3, #1
 80020de:	4628      	mov	r0, r5
 80020e0:	47b0      	blx	r6
 80020e2:	4602      	mov	r2, r0
 80020e4:	1c50      	adds	r0, r2, #1
 80020e6:	d1c9      	bne.n	800207c <__sflush_r+0x30>
 80020e8:	682b      	ldr	r3, [r5, #0]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d0c6      	beq.n	800207c <__sflush_r+0x30>
 80020ee:	2b1d      	cmp	r3, #29
 80020f0:	d001      	beq.n	80020f6 <__sflush_r+0xaa>
 80020f2:	2b16      	cmp	r3, #22
 80020f4:	d11d      	bne.n	8002132 <__sflush_r+0xe6>
 80020f6:	602f      	str	r7, [r5, #0]
 80020f8:	2000      	movs	r0, #0
 80020fa:	e021      	b.n	8002140 <__sflush_r+0xf4>
 80020fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002100:	b21b      	sxth	r3, r3
 8002102:	e01a      	b.n	800213a <__sflush_r+0xee>
 8002104:	690f      	ldr	r7, [r1, #16]
 8002106:	2f00      	cmp	r7, #0
 8002108:	d0f6      	beq.n	80020f8 <__sflush_r+0xac>
 800210a:	0793      	lsls	r3, r2, #30
 800210c:	680e      	ldr	r6, [r1, #0]
 800210e:	bf08      	it	eq
 8002110:	694b      	ldreq	r3, [r1, #20]
 8002112:	600f      	str	r7, [r1, #0]
 8002114:	bf18      	it	ne
 8002116:	2300      	movne	r3, #0
 8002118:	1bf6      	subs	r6, r6, r7
 800211a:	608b      	str	r3, [r1, #8]
 800211c:	2e00      	cmp	r6, #0
 800211e:	ddeb      	ble.n	80020f8 <__sflush_r+0xac>
 8002120:	6a21      	ldr	r1, [r4, #32]
 8002122:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8002126:	4633      	mov	r3, r6
 8002128:	463a      	mov	r2, r7
 800212a:	4628      	mov	r0, r5
 800212c:	47e0      	blx	ip
 800212e:	2800      	cmp	r0, #0
 8002130:	dc07      	bgt.n	8002142 <__sflush_r+0xf6>
 8002132:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002136:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800213a:	81a3      	strh	r3, [r4, #12]
 800213c:	f04f 30ff 	mov.w	r0, #4294967295
 8002140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002142:	4407      	add	r7, r0
 8002144:	1a36      	subs	r6, r6, r0
 8002146:	e7e9      	b.n	800211c <__sflush_r+0xd0>
 8002148:	dfbffffe 	.word	0xdfbffffe

0800214c <_fflush_r>:
 800214c:	b538      	push	{r3, r4, r5, lr}
 800214e:	690b      	ldr	r3, [r1, #16]
 8002150:	4605      	mov	r5, r0
 8002152:	460c      	mov	r4, r1
 8002154:	b913      	cbnz	r3, 800215c <_fflush_r+0x10>
 8002156:	2500      	movs	r5, #0
 8002158:	4628      	mov	r0, r5
 800215a:	bd38      	pop	{r3, r4, r5, pc}
 800215c:	b118      	cbz	r0, 8002166 <_fflush_r+0x1a>
 800215e:	6a03      	ldr	r3, [r0, #32]
 8002160:	b90b      	cbnz	r3, 8002166 <_fflush_r+0x1a>
 8002162:	f7ff fc93 	bl	8001a8c <__sinit>
 8002166:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d0f3      	beq.n	8002156 <_fflush_r+0xa>
 800216e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002170:	07d0      	lsls	r0, r2, #31
 8002172:	d404      	bmi.n	800217e <_fflush_r+0x32>
 8002174:	0599      	lsls	r1, r3, #22
 8002176:	d402      	bmi.n	800217e <_fflush_r+0x32>
 8002178:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800217a:	f7ff fe6c 	bl	8001e56 <__retarget_lock_acquire_recursive>
 800217e:	4628      	mov	r0, r5
 8002180:	4621      	mov	r1, r4
 8002182:	f7ff ff63 	bl	800204c <__sflush_r>
 8002186:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002188:	07da      	lsls	r2, r3, #31
 800218a:	4605      	mov	r5, r0
 800218c:	d4e4      	bmi.n	8002158 <_fflush_r+0xc>
 800218e:	89a3      	ldrh	r3, [r4, #12]
 8002190:	059b      	lsls	r3, r3, #22
 8002192:	d4e1      	bmi.n	8002158 <_fflush_r+0xc>
 8002194:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002196:	f7ff fe5f 	bl	8001e58 <__retarget_lock_release_recursive>
 800219a:	e7dd      	b.n	8002158 <_fflush_r+0xc>

0800219c <__swhatbuf_r>:
 800219c:	b570      	push	{r4, r5, r6, lr}
 800219e:	460c      	mov	r4, r1
 80021a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021a4:	2900      	cmp	r1, #0
 80021a6:	b096      	sub	sp, #88	@ 0x58
 80021a8:	4615      	mov	r5, r2
 80021aa:	461e      	mov	r6, r3
 80021ac:	da0d      	bge.n	80021ca <__swhatbuf_r+0x2e>
 80021ae:	89a3      	ldrh	r3, [r4, #12]
 80021b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80021b4:	f04f 0100 	mov.w	r1, #0
 80021b8:	bf14      	ite	ne
 80021ba:	2340      	movne	r3, #64	@ 0x40
 80021bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80021c0:	2000      	movs	r0, #0
 80021c2:	6031      	str	r1, [r6, #0]
 80021c4:	602b      	str	r3, [r5, #0]
 80021c6:	b016      	add	sp, #88	@ 0x58
 80021c8:	bd70      	pop	{r4, r5, r6, pc}
 80021ca:	466a      	mov	r2, sp
 80021cc:	f000 f848 	bl	8002260 <_fstat_r>
 80021d0:	2800      	cmp	r0, #0
 80021d2:	dbec      	blt.n	80021ae <__swhatbuf_r+0x12>
 80021d4:	9901      	ldr	r1, [sp, #4]
 80021d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80021da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80021de:	4259      	negs	r1, r3
 80021e0:	4159      	adcs	r1, r3
 80021e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021e6:	e7eb      	b.n	80021c0 <__swhatbuf_r+0x24>

080021e8 <__smakebuf_r>:
 80021e8:	898b      	ldrh	r3, [r1, #12]
 80021ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80021ec:	079d      	lsls	r5, r3, #30
 80021ee:	4606      	mov	r6, r0
 80021f0:	460c      	mov	r4, r1
 80021f2:	d507      	bpl.n	8002204 <__smakebuf_r+0x1c>
 80021f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80021f8:	6023      	str	r3, [r4, #0]
 80021fa:	6123      	str	r3, [r4, #16]
 80021fc:	2301      	movs	r3, #1
 80021fe:	6163      	str	r3, [r4, #20]
 8002200:	b003      	add	sp, #12
 8002202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002204:	ab01      	add	r3, sp, #4
 8002206:	466a      	mov	r2, sp
 8002208:	f7ff ffc8 	bl	800219c <__swhatbuf_r>
 800220c:	9f00      	ldr	r7, [sp, #0]
 800220e:	4605      	mov	r5, r0
 8002210:	4639      	mov	r1, r7
 8002212:	4630      	mov	r0, r6
 8002214:	f7ff fe8e 	bl	8001f34 <_malloc_r>
 8002218:	b948      	cbnz	r0, 800222e <__smakebuf_r+0x46>
 800221a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800221e:	059a      	lsls	r2, r3, #22
 8002220:	d4ee      	bmi.n	8002200 <__smakebuf_r+0x18>
 8002222:	f023 0303 	bic.w	r3, r3, #3
 8002226:	f043 0302 	orr.w	r3, r3, #2
 800222a:	81a3      	strh	r3, [r4, #12]
 800222c:	e7e2      	b.n	80021f4 <__smakebuf_r+0xc>
 800222e:	89a3      	ldrh	r3, [r4, #12]
 8002230:	6020      	str	r0, [r4, #0]
 8002232:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002236:	81a3      	strh	r3, [r4, #12]
 8002238:	9b01      	ldr	r3, [sp, #4]
 800223a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800223e:	b15b      	cbz	r3, 8002258 <__smakebuf_r+0x70>
 8002240:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002244:	4630      	mov	r0, r6
 8002246:	f000 f81d 	bl	8002284 <_isatty_r>
 800224a:	b128      	cbz	r0, 8002258 <__smakebuf_r+0x70>
 800224c:	89a3      	ldrh	r3, [r4, #12]
 800224e:	f023 0303 	bic.w	r3, r3, #3
 8002252:	f043 0301 	orr.w	r3, r3, #1
 8002256:	81a3      	strh	r3, [r4, #12]
 8002258:	89a3      	ldrh	r3, [r4, #12]
 800225a:	431d      	orrs	r5, r3
 800225c:	81a5      	strh	r5, [r4, #12]
 800225e:	e7cf      	b.n	8002200 <__smakebuf_r+0x18>

08002260 <_fstat_r>:
 8002260:	b538      	push	{r3, r4, r5, lr}
 8002262:	4d07      	ldr	r5, [pc, #28]	@ (8002280 <_fstat_r+0x20>)
 8002264:	2300      	movs	r3, #0
 8002266:	4604      	mov	r4, r0
 8002268:	4608      	mov	r0, r1
 800226a:	4611      	mov	r1, r2
 800226c:	602b      	str	r3, [r5, #0]
 800226e:	f7fe fd41 	bl	8000cf4 <_fstat>
 8002272:	1c43      	adds	r3, r0, #1
 8002274:	d102      	bne.n	800227c <_fstat_r+0x1c>
 8002276:	682b      	ldr	r3, [r5, #0]
 8002278:	b103      	cbz	r3, 800227c <_fstat_r+0x1c>
 800227a:	6023      	str	r3, [r4, #0]
 800227c:	bd38      	pop	{r3, r4, r5, pc}
 800227e:	bf00      	nop
 8002280:	2000020c 	.word	0x2000020c

08002284 <_isatty_r>:
 8002284:	b538      	push	{r3, r4, r5, lr}
 8002286:	4d06      	ldr	r5, [pc, #24]	@ (80022a0 <_isatty_r+0x1c>)
 8002288:	2300      	movs	r3, #0
 800228a:	4604      	mov	r4, r0
 800228c:	4608      	mov	r0, r1
 800228e:	602b      	str	r3, [r5, #0]
 8002290:	f7fe fd3f 	bl	8000d12 <_isatty>
 8002294:	1c43      	adds	r3, r0, #1
 8002296:	d102      	bne.n	800229e <_isatty_r+0x1a>
 8002298:	682b      	ldr	r3, [r5, #0]
 800229a:	b103      	cbz	r3, 800229e <_isatty_r+0x1a>
 800229c:	6023      	str	r3, [r4, #0]
 800229e:	bd38      	pop	{r3, r4, r5, pc}
 80022a0:	2000020c 	.word	0x2000020c

080022a4 <_sbrk_r>:
 80022a4:	b538      	push	{r3, r4, r5, lr}
 80022a6:	4d06      	ldr	r5, [pc, #24]	@ (80022c0 <_sbrk_r+0x1c>)
 80022a8:	2300      	movs	r3, #0
 80022aa:	4604      	mov	r4, r0
 80022ac:	4608      	mov	r0, r1
 80022ae:	602b      	str	r3, [r5, #0]
 80022b0:	f7fe fd46 	bl	8000d40 <_sbrk>
 80022b4:	1c43      	adds	r3, r0, #1
 80022b6:	d102      	bne.n	80022be <_sbrk_r+0x1a>
 80022b8:	682b      	ldr	r3, [r5, #0]
 80022ba:	b103      	cbz	r3, 80022be <_sbrk_r+0x1a>
 80022bc:	6023      	str	r3, [r4, #0]
 80022be:	bd38      	pop	{r3, r4, r5, pc}
 80022c0:	2000020c 	.word	0x2000020c

080022c4 <_init>:
 80022c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022c6:	bf00      	nop
 80022c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ca:	bc08      	pop	{r3}
 80022cc:	469e      	mov	lr, r3
 80022ce:	4770      	bx	lr

080022d0 <_fini>:
 80022d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022d2:	bf00      	nop
 80022d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022d6:	bc08      	pop	{r3}
 80022d8:	469e      	mov	lr, r3
 80022da:	4770      	bx	lr
